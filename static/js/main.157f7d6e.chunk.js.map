{"version":3,"sources":["features/hex2048-game/actions.ts","features/hex-grids/direction.ts","features/hex-grids/cube-coords.ts","features/hex-grids/conversions.ts","features/hex-grids/utils.ts","features/hex2048-game/board.ts","features/hex2048-game/game-logic.ts","features/hex2048-game/reducer.ts","app/store.ts","features/hex2048-game/LevelSelectionButtons.tsx","features/hex2048-game/colors.ts","features/hex2048-game/ShowBoard.tsx","features/hex2048-game/Game.tsx","App.tsx","index.tsx"],"names":["MOVE_ACTION","NEW_LEVEL_ACTION","newMoveAction","direction","type","Direction","AllDirections","NW","NE","N","S","SW","SE","cc","x","y","z","Error","ZeroInCube","cubeCoordsToString","c","abs","Math","oddQOffsetToCubeCoords","r","evenQOffsetToCubeCoords","reverse","array","A","minusToPlusN","n","f","forEach","i","inBounds","board","b","a","size","cellAt","result","data","get","undefined","O","mapBoardInOffsetQ","convertF","flatMap","map","coords","mapSlicesBySomething","create","first","values","indices","second","cell","v","push","converted","idx","updated","mapSlicesByX","third","mapSlicesByY","mapSlicesByZ","newValue","update","value","maxNumber","numbers","max","mergeAndMoveInDirection","d","console","log","moved","moveInDirection","mergeLeft","mergeRight","mergeInDirection","length","rest","slice","shiftLeft","filtered","filter","Array","fill","shiftRight","toDisplay","pow","isGameOver","every","equals","addRandomValues","empty","p","filterCoordinates","selected","order","random","sort","initialState","newState","valueGenerator","Map","cubeAsString","set","createBoard","maxNumberSeen","gameOver","moves","SadBeep","Audio","rootReducer","combineReducers","hex2048","state","action","newBoard","play","maxOnThis","adjustedBoard","store","createStore","hex2048Selector","useAppDispatch","useDispatch","LevelSelectionButtons","dispatch","className","disabled","level","onClick","colors","backgroundOf","ShowBoard","useSelector","id","coordsAsString","dominantDirection","cursor","toLowerCase","style","display","backgroundColor","rendered","data-coords","hexClicked","Game","container","useRef","useEffect","current","focus","ref","tabIndex","onKeyDown","e","code","padding","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.157f7d6e.chunk.js","sourcesContent":["import {Direction} from '../hex-grids/direction'\nimport {Size} from './board'\n\nexport const MOVE_ACTION = 'hex-2048/move'\nexport const NEW_LEVEL_ACTION = 'hex-2048/newLevel'\n\nexport interface MoveAction {\n    type: typeof MOVE_ACTION\n    direction: Direction\n}\n\nexport interface NewLevelAction {\n    type: typeof NEW_LEVEL_ACTION\n    size: Size\n}\n\nexport type BoardAction = MoveAction | NewLevelAction\n\nexport function newMoveAction(direction: Direction): MoveAction {\n    return {\n        type: MOVE_ACTION,\n        direction,\n    }\n}\n\nexport function newLevelAction(size: Size): NewLevelAction {\n    return {\n        type: NEW_LEVEL_ACTION,\n        size,\n    }\n}\n","export enum Direction {\n    NW  =   'NW',\n    NE  =   'NE',\n    N   =   'N',\n    S   =   'S',\n    SW  =   'SW',\n    SE  =   'SE',\n}\n\nexport const AllDirections: Direction[] = [Direction.NW, Direction.NE, Direction.N, Direction.S, Direction.SW, Direction.SE]\n","import * as O from 'fp-ts/Option'\nimport {Direction} from './direction'\nimport {Brand} from './utils'\n\nexport type X = Brand<number, 'cc-x'>\nexport type Y = Brand<number, 'cc-y'>\nexport type Z = Brand<number, 'cc-z'>\n\nexport interface CubeCoords {\n    readonly x: X\n    readonly y: Y\n    readonly z: Z\n}\n\nexport function cc(x: number, y: number, z: number): CubeCoords {\n    if (x + y + z === 0) {\n        return {x: x as X, y: y as Y, z: z as Z}\n    } else {\n        throw new Error(`Inconsistent cube coordinates - ${x} ${y} ${z}`)\n    }\n}\n\nexport const ZeroInCube = cc(0, 0, 0)\n\nexport type CubeCoordsAsString = Brand<string, 'cube-coords-as-string'>\n\nconst Separator = '_'\nexport function cubeCoordsToString(c: CubeCoords): CubeCoordsAsString {\n    return c.x + Separator + c.y + Separator + c.z as CubeCoordsAsString\n}\n\nexport function dominantDirection(c: CubeCoords): O.Option<Direction> {\n    if ((c.x === 0) && (c.y === 0) && (c.z === 0)) {\n        return O.none\n    } else if (c.x === 0) {\n        return O.some(c.y > 0 ? Direction.N : Direction.S)\n    } else if (c.y === 0) {\n        return O.some(c.x > 0 ? Direction.NE : Direction.SW)\n    } else if (c.z === 0) {\n        return O.some(c.y > 0 ? Direction.NW : Direction.SE)\n    } else {\n        return O.none\n    }\n}\n\nconst abs = Math.abs\nexport function distance(a: CubeCoords, b: CubeCoords): number {\n    return (abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z)) / 2\n}\n\n","import {cc, CubeCoords} from './cube-coords'\n\nexport function oddQOffsetToCubeCoords(r: number, c: number): CubeCoords {\n    const x = c\n    const z = r - (c - (c & 1)) / 2\n    const y = -x-z\n    return cc(x, y, z)\n}\n\nexport function evenQOffsetToCubeCoords(r: number, c: number): CubeCoords {\n    const x = c\n    const z = r - (c + (c & 1)) / 2\n    const y = -x-z\n    return cc(x, y, z)\n}\n","import * as A from 'fp-ts/Array'\n\nexport type Brand<K, T> = K & { __brand: T }\n\nexport const reverse = <T>(array: readonly T[]): readonly T[] => A.reverse([...array])\n\nexport function minusToPlusN(n: number, f: (x: number) => void): void {\n    A.range(-n, n).forEach((i) => f(i))\n}\n","import {Map} from 'immutable'\nimport * as O from 'fp-ts/lib/Option'\nimport * as A from 'fp-ts/Array'\nimport {\n    cc,\n    CubeCoords,\n    CubeCoordsAsString,\n    cubeCoordsToString,\n    distance,\n    ZeroInCube\n} from '../hex-grids/cube-coords'\nimport {evenQOffsetToCubeCoords, oddQOffsetToCubeCoords} from '../hex-grids/conversions'\nimport {Brand, minusToPlusN} from '../hex-grids/utils'\nimport {CellValue} from './game-logic'\n\nexport type Size = Brand<number, 'board-size'>\nexport type Board<T> = {\n    readonly size: Size\n    readonly data: Map<CubeCoordsAsString, T>\n}\n\nexport function createBoard<T>(size: Size, valueGenerator: (c: CubeCoords) => T): Board<T> {\n    let data: Map<CubeCoordsAsString, T> = Map()\n\n    minusToPlusN(size, (x) => {\n        minusToPlusN(size, (y) => {\n            minusToPlusN(size, (z) => {\n                if (x + y + z === 0) {\n                    const coords = cc(x, y, z)\n                    const cubeAsString = cubeCoordsToString(coords)\n                    const value = valueGenerator(coords)\n                    data = data.set(cubeAsString, value)\n                }\n            })\n        })\n    })\n\n    return { size, data }\n}\n\nexport function inBounds<T>(board: Board<T>, c: CubeCoords): boolean {\n    return distance(ZeroInCube, c) <= board.size\n}\n\nexport function cellAt<T>(board: Board<T>, c: CubeCoords): O.Option<T> {\n    const result = board.data.get(cubeCoordsToString(c))\n    return result === undefined ? O.none : O.some(result)\n}\n\nexport function mapBoardInOffsetQ<T, R>(board: Board<T>, f: (c: CubeCoords, value: O.Option<T>) => R): readonly R[] {\n    const convertF = board.size % 2 === 0 ? oddQOffsetToCubeCoords : evenQOffsetToCubeCoords\n\n    return A.range(-board.size, board.size).flatMap((r) =>\n        A.range(-board.size, board.size).map((c) => {\n            const coords: CubeCoords = convertF(r, c)\n            const result = cellAt(board, coords)\n            return f(coords, result)\n        })\n    )\n}\n\nfunction mapSlicesBySomething<T>(\n    board: Board<T>,\n    f: (data: readonly T[]) => readonly T[],\n    create: (first: number, second: number, third: number) => CubeCoords,\n): Board<T> {\n    let result = board\n\n    A.range(-board.size, board.size).forEach((first) => {\n        const values: T[] = []\n        const indices: number[] = []\n\n        A.range(-board.size, board.size).forEach((second) => {\n            const third = -first-second\n            const coords = create(first, second, third)\n            const cell = cellAt(board, coords)\n\n            // eslint-disable-next-line array-callback-return\n            O.map<T, void>((v) => {\n                values.push(v)\n                indices.push(second)\n            })(cell)\n        })\n\n        const converted = f(values)\n\n        indices.forEach((second, idx) => {\n            const third = -first-second\n            const coords = create(first, second, third)\n            result = updated(result, coords, converted[idx])\n        })\n    })\n\n    return result\n}\n\nexport function mapSlicesByX<T>(board: Board<T>, f: (data: readonly T[]) => readonly T[]): Board<T> {\n    return mapSlicesBySomething(board, f, (first: number, second: number, third: number) => cc(first, third, second))\n}\n\nexport function mapSlicesByY<T>(board: Board<T>, f: (data: readonly T[]) => readonly T[]): Board<T> {\n    return mapSlicesBySomething(board, f, (first: number, second: number, third: number) => cc(third, first, second))\n}\n\nexport function mapSlicesByZ<T>(board: Board<T>, f: (data: readonly T[]) => readonly T[]): Board<T> {\n    return mapSlicesBySomething(board, f, (first: number, second: number, third: number) => cc(second, third, first))\n}\n\nexport function updated<T>(board: Board<T>, c: CubeCoords, newValue: T): Board<T> {\n    if (inBounds(board, c)) {\n        return {\n            size: board.size,\n            data: board.data.update(cubeCoordsToString(c), () => newValue),\n        }\n    } else {\n        throw new Error(`Cannot update ${c} as it is out of bounds for ${board}`)\n    }\n}\n\nexport function map<T, R>(board: Board<T>, f: (c: CubeCoords, v: T) => R): R[] {\n    return flatMap(board, (c, v) => [f(c, v)])\n}\n\nexport function flatMap<T, R>(board: Board<T>, f: (c: CubeCoords, v: T) => R[]): R[] {\n    return A.range(-board.size, board.size).flatMap(x =>\n        A.range(-board.size, board.size).flatMap(y =>\n            A.range(-board.size, board.size).flatMap(z => {\n                if (x + y + z === 0) {\n                    const coords = cc(x, y, z)\n                    const value = board.data.get(cubeCoordsToString(coords))\n                    if (value === undefined) {\n                        throw new Error(`Expected to find ${coords}`)\n                    } else {\n                        return f(coords, value)\n                    }\n                } else {\n                    return []\n                }\n            })\n        )\n    )\n}\n\nexport function maxNumber(board: Board<CellValue>): CellValue {\n    const numbers = map(board, (c, v) => v)\n    return Math.max(...numbers) as CellValue\n}\n\nexport function filterCoordinates<T>(board: Board<T>, p: (v: T) => boolean): CubeCoords[] {\n    return flatMap(board, (c, v) => p(v) ? [c] : [])\n}\n","import {AllDirections, Direction} from '../hex-grids/direction'\nimport {Brand, reverse} from '../hex-grids/utils'\nimport {Board, mapSlicesByX, mapSlicesByY, mapSlicesByZ} from './board'\n\nexport type CellValue = Brand<number, 'cell-value'>\n\nexport function mergeAndMoveInDirection(board: Board<CellValue>, d: Direction): Board<CellValue> {\n    console.log(`Move and merge ${d}`)\n    const moved = moveInDirection(board, d)\n    const merged = mergeInDirection(moved, d)\n    return moveInDirection(merged, d)\n}\n\nfunction mergeLeft(array: readonly CellValue[]): readonly CellValue[] {\n    if (array.length <= 1) {\n        return array\n    } else {\n        const a = array[0]\n        const b = array[1]\n        const rest = array.slice(2)\n        if (a === b) {\n            if (a === 0) { // empty field\n                return [a, b, ...mergeLeft(rest)]\n            } else { // we do the merge\n                return [a + 1 as CellValue, 0 as CellValue, ...mergeLeft(rest)]\n            }\n        } else {\n            return [a, ...mergeLeft([b, ...rest])]\n        }\n    }\n}\n\nfunction mergeRight(array: readonly CellValue[]): readonly CellValue[] {\n    return reverse(mergeLeft(reverse(array)))\n}\n\nexport function mergeInDirection(board: Board<CellValue>, d: Direction): Board<CellValue> {\n    switch (d) {\n    case Direction.NW:\n        return mapSlicesByZ(board, mergeLeft)\n    case Direction.SE:\n        return mapSlicesByZ(board, mergeRight)\n    case Direction.N:\n        return mapSlicesByX(board, mergeLeft)\n    case Direction.S:\n        return mapSlicesByX(board, mergeRight)\n    case Direction.NE:\n        return mapSlicesByY(board, mergeLeft)\n    case Direction.SW:\n        return mapSlicesByY(board, mergeRight)\n    }\n}\n\nfunction shiftLeft(array: readonly CellValue[]): readonly CellValue[] {\n    const missingZeros = (length: number): readonly CellValue[] => new Array(length).fill(0 as CellValue)\n    const filtered = array.filter((x) => x > 0)\n    return [...filtered, ...missingZeros(array.length - filtered.length)]\n}\n\nfunction shiftRight(array: readonly CellValue[]): readonly CellValue[] {\n    return reverse(shiftLeft(reverse(array)))\n}\n\nexport function moveInDirection(board: Board<CellValue>, d: Direction): Board<CellValue> {\n    switch (d) {\n    case Direction.NW:\n        return mapSlicesByZ(board, shiftLeft)\n    case Direction.SE:\n        return mapSlicesByZ(board, shiftRight)\n    case Direction.N:\n        return mapSlicesByX(board, shiftLeft)\n    case Direction.S:\n        return mapSlicesByX(board, shiftRight)\n    case Direction.NE:\n        return mapSlicesByY(board, shiftLeft)\n    case Direction.SW:\n        return mapSlicesByY(board, shiftRight)\n    }\n}\n\nexport function toDisplay(n: CellValue): string {\n    return n ? `${Math.pow(2, n)}` : ''\n}\n\nexport function isGameOver(board: Board<CellValue>): boolean {\n    return AllDirections.every((d) =>\n        mergeAndMoveInDirection(board, d).data.equals(board.data)\n    )\n}\n","import {Board, createBoard, filterCoordinates, maxNumber, Size, updated} from './board'\nimport {BoardAction, MOVE_ACTION, NEW_LEVEL_ACTION} from './actions'\nimport {Game2048State} from './state'\nimport {CellValue, isGameOver, mergeAndMoveInDirection} from './game-logic'\n\nfunction pickRandomN<T>(array: readonly T[], n: number): T[] {\n    return array\n        .map((a) => ({order: Math.random(), value: a}))\n        .sort((a, b) => a.order - b.order)\n        .map((a) => a.value)\n        .slice(0, n)\n}\n\nfunction addRandomValues(board: Board<CellValue>): Board<CellValue> {\n    const empty = filterCoordinates(board, (v) => v === 0 as CellValue)\n    const selected = pickRandomN(empty, 2)\n    const value = (Math.random() > 0.5 ? 1 : 2) as CellValue // either 2^1 == 2 or 2^2 == 4\n    let result = board\n    selected.forEach((c) => {\n        result = updated(result, c, value)\n    })\n    return result\n}\n\nconst initialSize = 2 as Size\nconst initialState: Game2048State = newState(initialSize)\n\nfunction newState(size: Size): Game2048State {\n    const board = addRandomValues(createBoard(size, () => 0 as CellValue))\n\n    return {\n        board,\n        maxNumberSeen: maxNumber(board),\n        gameOver: false,\n        moves: 0,\n    }\n}\n\n// eslint-disable-next-line max-len\nconst SadBeep = new Audio('data:audio/mpeg;base64,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wZ0G7jqlt/OcDIKX+/1NblSX+VKfQfP8xuJJGk7////rf////+PgXTv///1JThJJQainmySAB6imUyuVbVttUo7T4Csa821OuF88f62+CZHFnGf///mQgYIEO0SMF2NVy9NxYTdlqJ8AuS4zr//SJoTUJ+CaKKTcZvosrUPo8W/MUv0f033E9E/QpN6P///v/////WRR2mwUAYUABjabRu1vrOLKAF0kIdHjnEx/iNWo7jGn1////mApxNTJQQOU1Het/NoUFTMQs6Vja///THaGIl/0fojl8mjd/Jo8W+ZfpNpCajsz7////6kn/////WRRgDz//LD1KSTDjKOciSAKxdLx5S31uYqKIWj/+5JECgAC8V5M6g9rdFyr6Vo9rW6KtHcr5DEJQRkSpLRklSigvVc4QpmyPe9H3zHR1/in9P/8VNCMJOzYUDyVjfwHP0ZgiZt/3/+9EBnDKbegdUrckhgntHaQ9vX/X/9A/////+r/////mJ3/9ItRcoVRogAcmV9N8z0pvES8QQsKoMGXEymPQyWm6E4HQLqgpv/CZJAtYXQSwoF8e6SB56zABEoW+qgZjJAZovGr0Gl5/OjFKL3JwnaX9v7/X8y1f/////////49WAzMzEYYMZLq6CUANIqbDX7lisBIdraAEPwShTRc9WZ2vAqBc4NQ9GrUNaw0Czcrte0g1NEoiU8NFjx4NFh54FSwlOlgaCp0S3hqo8SLOh3/63f7P/KgKJxxhgGSnAFMCnIogwU5JoqBIDAuBIiNLETyFmiImtYiDTSlb8ziIFYSFv/QPC38zyxEOuPeVGHQ77r/1u/+kq49//6g4gjoVQSUMYQUSAP8PwRcZIyh2kCI2OwkZICZmaZxgnsNY8DmSCWX0idhtz3VTJSqErTSB//1X7TTTVVV//uSZB2P8xwRJ4HvYcItQlWBACM4AAABpAAAACAAADSAAAAEVf/+qCE000VVVVU0002//+qqqqummmmr///qqqppppoqqqqppppoqqATkEjIyIxBlBA5KwUEDBBwkFhYWFhUVFfiqhYWFhcVFRUVFv/Ff/xUVFRYWFpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==')\n\nexport function hex2048Reducer(state: Game2048State = initialState, action: BoardAction): Game2048State {\n    const board = state.board\n\n    switch (action.type) {\n    case MOVE_ACTION: {\n        const newBoard = mergeAndMoveInDirection(board, action.direction)\n        if (newBoard.data.equals(board.data)) { // nothing changed\n            SadBeep.play() // TODO: This should probably be done otherwise\n            return state\n        } else {\n            const maxOnThis = maxNumber(newBoard)\n            const maxNumberSeen = Math.max(state.maxNumberSeen, maxOnThis) as CellValue\n            const adjustedBoard = addRandomValues(newBoard)\n            return {\n                maxNumberSeen,\n                board: adjustedBoard,\n                gameOver: isGameOver(adjustedBoard),\n                moves: state.moves + 1,\n            }\n        }\n    }\n    case NEW_LEVEL_ACTION:\n        return newState(action.size)\n    default:\n        return state\n    }\n}\n","import {combineReducers, createStore} from 'redux'\nimport {useDispatch} from 'react-redux'\nimport {hex2048Reducer} from '../features/hex2048-game/reducer'\n\nconst rootReducer = combineReducers({\n    hex2048: hex2048Reducer,\n})\n\nexport const store = createStore(rootReducer)\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport const hex2048Selector = (state: RootState) => state.hex2048\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>() // Export a hook that can be reused to resolve types\n","import {newLevelAction} from './actions'\nimport React from 'react'\nimport {useAppDispatch} from '../../app/store'\nimport {Size} from './board'\n\nexport function LevelSelectionButtons() {\n    const dispatch = useAppDispatch()\n\n    return (\n        <div className='buttons has-addons'>\n            <button className='button' disabled={true}>\n                New Level\n            </button>\n            {[1, 2, 3, 4].map((level) =>\n                (<button\n                    className='button'\n                    key={level}\n                    onClick={() => dispatch(newLevelAction(level as Size))}\n                >\n                    {level}\n                </button>)\n            )}\n        </div>\n    )\n}\n","import {CellValue} from './game-logic'\n\nconst colors = [\n    '#D0D0D0', // empty\n    '#B0D8A4', // 2\n    '#CADB9E', // 4\n    '#E4DE97', // 8\n    '#FEE191', // 16\n    '#FEC181', // 32\n    '#FDA070', // 64\n    '#FD8060', // 128\n    '#F9715E', // 256\n    '#F4615C', // 512\n    '#F0525A', // 1024\n    '#EB4258', // 2048\n]\n\nexport function backgroundOf(n: CellValue): string {\n    return colors[n] || colors[colors.length - 1]\n}\n","import {useSelector} from 'react-redux'\nimport React, {CSSProperties} from 'react'\nimport {newMoveAction} from './actions'\nimport {hex2048Selector, useAppDispatch} from '../../app/store'\nimport './ShowBoard.scss'\nimport * as O from 'fp-ts/Option'\nimport {CubeCoords, cubeCoordsToString, dominantDirection} from '../hex-grids/cube-coords'\nimport {Direction} from '../hex-grids/direction'\nimport {mapBoardInOffsetQ} from './board'\nimport {CellValue, toDisplay} from './game-logic'\nimport {backgroundOf} from './colors'\nimport {Game2048State} from './state'\n\nexport function ShowBoard() {\n    const hex2048: Game2048State = useSelector(hex2048Selector)\n    const board = hex2048.board\n    const dispatch = useAppDispatch()\n\n    function hexClicked(direction: O.Option<Direction>) {\n        O.map<Direction, void>((v) => dispatch(newMoveAction(v)))(direction)\n    }\n\n    function createHex(c: CubeCoords, v: O.Option<CellValue>) {\n        const coordsAsString = cubeCoordsToString(c)\n        const direction = dominantDirection(c)\n        const cursor = O.fold<Direction, string>(() => 'not-allowed', (d) => `${d.toLowerCase()}-resize`)(\n            direction)\n\n        const style: CSSProperties = O.fold<CellValue, CSSProperties>(() =>\n            ({\n                display: 'none',\n            }),\n        (n: CellValue) =>\n            ({\n                backgroundColor: backgroundOf(n),\n                cursor: cursor,\n            })\n        )(v)\n\n        const rendered = O.fold(() => '', toDisplay)(v)\n\n        return (<div\n            key={coordsAsString}\n            data-coords={coordsAsString}\n            className=\"hex\"\n            style={style}\n            onClick={() => hexClicked(direction)}\n        >\n            {rendered}\n        </div>)\n    }\n\n    return (\n        <div id={'boardHexGrid-' + board.size}>\n            <div className=\"hexCrop\">\n                <div className=\"hexGrid\">\n                    {mapBoardInOffsetQ(board, createHex)}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, {KeyboardEvent, useEffect, useRef} from 'react'\nimport {newMoveAction} from './actions'\nimport {hex2048Selector, useAppDispatch} from '../../app/store'\nimport {LevelSelectionButtons} from './LevelSelectionButtons'\nimport {ShowBoard} from './ShowBoard'\nimport './Game.scss'\nimport {Direction} from '../hex-grids/direction'\nimport {useSelector} from 'react-redux'\nimport {toDisplay} from './game-logic'\nimport {backgroundOf} from './colors'\nimport {Game2048State} from './state'\n\nexport function Game() {\n    const dispatch = useAppDispatch()\n    const hex2048: Game2048State = useSelector(hex2048Selector)\n    const {maxNumberSeen, gameOver, moves} = hex2048\n\n    function handleKeyDown<T>(e: KeyboardEvent<T>) {\n        if (e.code === 'KeyC') {\n            dispatch(newMoveAction(Direction.S))\n        } else if (e.code === 'KeyV') {\n            dispatch(newMoveAction(Direction.SE))\n        } else if (e.code === 'KeyX') {\n            dispatch(newMoveAction(Direction.SW))\n        } else if (e.code === 'KeyE') {\n            dispatch(newMoveAction(Direction.N))\n        } else if (e.code === 'KeyW') {\n            dispatch(newMoveAction(Direction.NW))\n        } else if (e.code === 'KeyR') {\n            dispatch(newMoveAction(Direction.NE))\n        }\n    }\n\n    const container = useRef<HTMLDivElement>(null)\n\n    useEffect(() => container.current?.focus())\n\n    return (\n        <div ref={container} className='container game-board' tabIndex={-1} onKeyDown={handleKeyDown}>\n            <LevelSelectionButtons/>\n            <ShowBoard/>\n            {gameOver ? <div className='notification is-danger'>Game over!</div> : null}\n            <div className='notification is-normal'>\n                <span className='has-text-weight-bold'>{moves}</span>\n                &nbsp;moves made. Maximum number seen:&nbsp;\n                <span\n                    className='has-text-weight-bold'\n                    style={{backgroundColor: backgroundOf(maxNumberSeen), padding: '4px'}}\n                >\n                    {maxNumberSeen > 0 ? toDisplay(maxNumberSeen) : 'none'}\n                </span>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport {Game} from './features/hex2048-game/Game'\n\nfunction App() {\n    return (\n        <section className=\"section\">\n            <Game/>\n        </section>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport 'bulma'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}