{"version":3,"sources":["features/hex2048-game/actions.ts","features/hex-grids/direction.ts","utils.ts","features/hex-grids/cube-coords.ts","features/hex2048-game/board.ts","features/hex2048-game/draw-events.ts","features/hex2048-game/game-logic.ts","features/hex2048-game/reducer.ts","features/hex2048-game/audio.ts","features/hex2048-game/pick-new-values/locally-pick-new-values.ts","features/hex2048-game/pick-new-values/remotely-pick-new-values.ts","features/hex2048-game/pick-new-values/pick-new-values.ts","features/hex2048-game/middleware.ts","app/store.ts","features/hex2048-game/LevelSelectionButtons.tsx","features/hex2048-game/colors.ts","features/hex-grids/conversions.ts","features/hex2048-game/board/div-based/Hex.tsx","features/hex2048-game/board/div-based/DivBasedBoard.tsx","features/hex2048-game/board/canvas-based/Canvas.tsx","features/hex2048-game/drawable.ts","features/hex2048-game/board/canvas-based/CanvasBasedBoard.tsx","features/hex2048-game/board/canvas-based/drawing.ts","features/hex2048-game/Game.tsx","App.tsx","index.tsx"],"names":["NewLevelKind","MoveActionKind","NewStateActionKind","moveAction","direction","type","payload","newStateAction","state","Direction","AllDirections","NW","NE","N","S","SW","SE","reverse","array","A","reversed","f","minusToPlusN","n","forEach","i","currentTimer","performance","now","convert","minIn","maxIn","minOut","maxOut","colorToRgba","color","r","parseInt","slice","g","b","a","rgbaToColor","c","Math","round","mixColors","first","firstProportion","second","extract","x","cc","y","z","Error","ZeroInCube","cubeCoordsToString","stringToCubeCoords","s","arr","split","length","Number","dominantDirection","O","abs","createBoard","size","valueGenerator","data","Map","coords","cubeAsString","value","set","inBounds","board","mapSlicesBySomething","create","result","values","indices","cell","get","undefined","cellAt","v","push","converted","idx","updated","mapSlicesByX","third","mapSlicesByY","mapSlicesByZ","updateFunction","update","oldValue","mapToArray","flatMapToArray","flatMap","maxValue","max","filterCoordinates","p","mergeDrawEvents","calculateDrawEventsBetweenBoards","from","to","timer","timer2","addAnimationCycle","timer3","fromCellIds","map","id","toSet","toCellIds","removed","subtract","added","stays","intersect","removeds","contains","kind","addeds","moveds","fromC","existing","findEntry","exS","oldCoords","newCoords","createInitialDrawEvents","removeObsoleteDrawEvents","drawEvents","ignoredCellIds","filter","event","e","includes","newEmptyCell","newCell","Zero","createUuid","allEmpty","every","q","mergeAndMoveLeft","head","tail","next","remainder","mergeAndMoveInDirection","d","mapSlices","mergeAndMoveInDirectionWithDrawEvents","newBoard","toDisplay","pow","isGameOver","equals","initialState","maxNumberSeen","gameOver","moves","SadBeep","Audio","playWarningSound","play","rng","random","pickRandomN","order","sort","empty","selectedCoords","selectedValue","PickRandomlyAddedValues","Host","toDto","fromDto","dto","log2","full","fetch","method","body","JSON","stringify","mode","headers","then","ok","json","catch","err","console","log","Promise","reject","text","dtos","error","selectedPickRandomlyAddedValues","Locally","pickRandomlyAddedValues","locallyPickRandomlyAddedValues","Remotely","remotelyPickRandomlyAddedValues","addRandomValues","picked","reduce","acc","emptyBoard","emptyDrawEvents","withAddedValues","addingDrawEvents","merged","moveDrawEvents","maxOnThis","laterTimer","mergedDrawEvents1","mergedDrawEvents2","removedDrawEvents","rootReducer","combineReducers","hex2048","action","store","createStore","applyMiddleware","performMoveAction","getState","dispatch","performNewLevel","hex2048Selector","useAppDispatch","useDispatch","LevelSelectionButtons","className","disabled","level","onClick","Colors","backgroundOf","flatHexToPixels","sqrt","Hex","props","cursor","toLowerCase","xy","boardSize","centerY","centerX","top","left","toPercent","cssProperties","backgroundColor","width","height","rendered","fontSize","floor","data-x","data-y","data-z","data-value","style","DivBasedBoard","Canvas","draw","canvasRef","useRef","divRef","useState","setWidth","setHeight","pixelRatio","window","devicePixelRatio","handleResize","current","clientWidth","clientHeight","useEffect","addEventListener","removeEventListener","useLayoutEffect","canvas","context","getContext","animationFrameId","render","requestAnimationFrame","cancelAnimationFrame","displayWidth","displayHeight","ref","onMouseMove","bounding","getBoundingClientRect","clientX","clientY","currentCursor","createDrawable","position","opacity","createDrawables","events","isRelevant","toArray","aE","bE","startTimer","finishTimer","eventToDrawable","CanvasBasedBoard","mousePosition","selectedCell","padding","ctx","drawables","w","h","minDim","min","centerPoint","convertF","clearRect","BaseBackground","diameter","background","fillStyle","beginPath","arc","PI","closePath","fill","drawCircle","drawable","screenXY","convertXY","path","Path2D","lineTo","cos","sin","createHexPath","selected","isPointInPath","adjustedBackground","lineWidth","strokeStyle","stroke","fillHex","textAdjustedColor","textSize","fillColor","font","measured","measureText","fillText","centeredText","elapsed","P","displayValue","display","Game","useSelector","RenderType","container","hexClicked","focus","renderType","CanvasBased","renderBoard","DivBased","tabIndex","onKeyDown","code","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51e31b5f.chunk.js","sourcesContent":["import {Game2048State} from './state'\nimport {Direction} from '../hex-grids/direction'\nimport {Size} from './board'\n\nexport const NewLevelKind = 'hex-2048/new-level'\nexport const MoveActionKind = 'hex-2048/move'\nexport const NewStateActionKind = 'hex-2048/new-state'\n\nexport interface NewStateAction {\n    type: typeof NewStateActionKind\n    payload: Game2048State\n}\n\nexport interface MoveAction {\n    type: typeof MoveActionKind\n    payload: Direction\n}\n\nexport interface NewLevelAction {\n    type: typeof NewLevelKind\n    payload: Size\n}\n\nexport type BoardAction = NewStateAction | NewLevelAction | MoveAction\n\nexport function moveAction(direction: Direction): MoveAction {\n    return {\n        type: MoveActionKind,\n        payload: direction,\n    }\n}\n\nexport function newLevelAction(size: Size): NewLevelAction {\n    return {\n        type: NewLevelKind,\n        payload: size,\n    }\n}\n\nexport function newStateAction(state: Game2048State): NewStateAction {\n    return {\n        type: NewStateActionKind,\n        payload: state,\n    }\n}\n","export enum Direction {\n    NW  =   'NW',\n    NE  =   'NE',\n    N   =   'N',\n    S   =   'S',\n    SW  =   'SW',\n    SE  =   'SE',\n}\n\nexport const AllDirections: Direction[] = [Direction.NW, Direction.NE, Direction.N, Direction.S, Direction.SW, Direction.SE]\n","import * as A from 'fp-ts/Array'\n\nexport type Brand<K, T> = K & { __brand: T }\n\nconst reverse = <T>(array: readonly T[]): readonly T[] => A.reverse([...array])\n\nexport const reversed = <A>(f: (array: readonly A[]) => readonly A[]): ((array: readonly A[]) => readonly A[]) =>\n    (array: readonly A[]) =>\n        reverse(f(reverse(array)))\n\nexport function minusToPlusN(n: number, f: (x: number) => void): void {\n    A.range(-n, n).forEach((i) => f(i))\n}\n\nexport type Timer = Brand<number, 'Timer'>\n\nexport function currentTimer(): Timer {\n    return performance.now() as Timer\n}\n\nexport function convert(n: number, minIn: number, maxIn: number, minOut: number, maxOut: number): number {\n    if (n < minIn) {\n        return minOut\n    } else if (n > maxIn) {\n        return maxOut\n    } else {\n        const prop = (n - minIn) / (maxIn - minIn)\n        return minOut + prop * (maxOut - minOut)\n    }\n}\n\ninterface ColorRgba {\n    r: number\n    g: number\n    b: number\n    a: number\n}\n\nfunction colorToRgba(color: ColorString): ColorRgba {\n    const r = parseInt(color.slice(1, 3), 16)\n    const g = parseInt(color.slice(3, 5), 16)\n    const b = parseInt(color.slice(5, 7), 16)\n    const a = 1\n    return { r, g, b, a }\n}\n\nfunction rgbaToColor(c: ColorRgba): ColorString {\n    return `rgba(${Math.round(c.r)}, ${Math.round(c.g)}, ${Math.round(c.b)}, ${c.a})` as ColorString\n}\n\nexport type ColorString = Brand<string, 'color-string'>\nexport function adjustHexOpacity(color: ColorString, opacity: number): ColorString {\n    const c = colorToRgba(color)\n    return rgbaToColor({\n        r: c.r,\n        g: c.g,\n        b: c.b,\n        a: opacity,\n    })\n}\n\nexport function mixColors(first: ColorString, firstProportion: number, second: ColorString): ColorString {\n    const a = colorToRgba(first)\n    const b = colorToRgba(second)\n\n    const f = (extract: (x: ColorRgba) => number): number =>\n        extract(a) * firstProportion + extract(b) * (1 -firstProportion)\n\n    const mixed = {\n        r: f((x) => x.r),\n        g: f((x) => x.g),\n        b: f((x) => x.b),\n        a: f((x) => x.a),\n    }\n\n    return rgbaToColor(mixed)\n}\n","import * as O from 'fp-ts/Option'\nimport {Direction} from './direction'\nimport {Brand} from '../../utils'\n\nexport type X = Brand<number, 'cc-x'>\nexport type Y = Brand<number, 'cc-y'>\nexport type Z = Brand<number, 'cc-z'>\n\nexport interface CubeCoords {\n    readonly x: X\n    readonly y: Y\n    readonly z: Z\n}\n\nexport function cc(x: number, y: number, z: number): CubeCoords {\n    if (x + y + z === 0) {\n        return {x: x as X, y: y as Y, z: z as Z}\n    } else {\n        throw new Error(`Inconsistent cube coordinates - ${x} ${y} ${z}`)\n    }\n}\n\nexport const ZeroInCube = cc(0, 0, 0)\n\nexport type CubeCoordsAsString = Brand<string, 'cube-coords-as-string'>\n\nconst Separator = '_'\nexport function cubeCoordsToString(c: CubeCoords): CubeCoordsAsString {\n    return c.x + Separator + c.y + Separator + c.z as CubeCoordsAsString\n}\n\nexport function stringToCubeCoords(s: CubeCoordsAsString): CubeCoords {\n    const arr = s.split(Separator)\n    if (arr.length !== 3) {\n        throw new Error(`Failed to parse ${s}`)\n    } else {\n        return cc(Number(arr[0]), Number(arr[1]), Number(arr[2]))\n    }\n}\n\nexport function dominantDirection(c: CubeCoords): O.Option<Direction> {\n    if ((c.x === 0) && (c.y === 0) && (c.z === 0)) {\n        return O.none\n    } else if (c.x === 0) {\n        return O.some(c.y > 0 ? Direction.N : Direction.S)\n    } else if (c.y === 0) {\n        return O.some(c.x > 0 ? Direction.NE : Direction.SW)\n    } else if (c.z === 0) {\n        return O.some(c.y > 0 ? Direction.NW : Direction.SE)\n    } else {\n        return O.none\n    }\n}\n\nconst abs = Math.abs\nexport function distance(a: CubeCoords, b: CubeCoords): number {\n    return (abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z)) / 2\n}\n\n","import {Map} from 'immutable'\nimport * as O from 'fp-ts/lib/Option'\nimport * as A from 'fp-ts/Array'\nimport {\n    cc,\n    CubeCoords,\n    CubeCoordsAsString,\n    cubeCoordsToString,\n    distance,\n    ZeroInCube\n} from '../hex-grids/cube-coords'\nimport {Brand, minusToPlusN} from '../../utils'\nimport {CellValue, GameBoard} from './game-logic'\n\nexport type Size = Brand<number, 'board-size'>\n\nexport type Board<T> = {\n    readonly size: Size\n    readonly data: Map<CubeCoordsAsString, T>\n}\n\nexport function createBoard<T>(size: Size, valueGenerator: (c: CubeCoords) => T): Board<T> {\n    let data: Map<CubeCoordsAsString, T> = Map()\n\n    minusToPlusN(size, (x) => {\n        minusToPlusN(size, (y) => {\n            minusToPlusN(size, (z) => {\n                if (x + y + z === 0) {\n                    const coords = cc(x, y, z)\n                    const cubeAsString = cubeCoordsToString(coords)\n                    const value = valueGenerator(coords)\n                    data = data.set(cubeAsString, value)\n                }\n            })\n        })\n    })\n\n    return { size, data }\n}\n\nexport function inBounds<T>(board: Board<T>, c: CubeCoords): boolean {\n    return distance(ZeroInCube, c) <= board.size\n}\n\nexport function cellAt<T>(board: Board<T>, c: CubeCoords): O.Option<T> {\n    const result = board.data.get(cubeCoordsToString(c))\n    return result === undefined ? O.none : O.some(result)\n}\n\nfunction mapSlicesBySomething<T>(\n    board: Board<T>,\n    f: (data: readonly T[]) => readonly T[],\n    create: (first: number, second: number, third: number) => CubeCoords,\n): Board<T> {\n    let result = board\n\n    A.range(-board.size, board.size).forEach((first) => {\n        const values: T[] = []\n        const indices: number[] = []\n\n        A.range(-board.size, board.size).forEach((second) => {\n            const third = -first-second\n            const coords = create(first, second, third)\n            const cell = cellAt(board, coords)\n\n            // eslint-disable-next-line array-callback-return\n            O.map<T, void>((v) => {\n                values.push(v)\n                indices.push(second)\n            })(cell)\n        })\n\n        const converted = f(values)\n\n        indices.forEach((second, idx) => {\n            const third = -first-second\n            const coords = create(first, second, third)\n            result = updated(result, coords, () => converted[idx])\n        })\n    })\n\n    return result\n}\n\nexport function mapSlicesByX<T>(board: Board<T>, f: (data: readonly T[]) => readonly T[]): Board<T> {\n    return mapSlicesBySomething(board, f, (first: number, second: number, third: number) => cc(first, third, second))\n}\n\nexport function mapSlicesByY<T>(board: Board<T>, f: (data: readonly T[]) => readonly T[]): Board<T> {\n    return mapSlicesBySomething(board, f, (first: number, second: number, third: number) => cc(third, first, second))\n}\n\nexport function mapSlicesByZ<T>(board: Board<T>, f: (data: readonly T[]) => readonly T[]): Board<T> {\n    return mapSlicesBySomething(board, f, (first: number, second: number, third: number) => cc(second, third, first))\n}\n\nexport function updated<T>(board: Board<T>, c: CubeCoords, updateFunction: (oldValue: T) => T): Board<T> {\n    if (inBounds(board, c)) {\n        return {\n            size: board.size,\n            data: board.data.update(cubeCoordsToString(c), (oldValue) => updateFunction(oldValue)),\n        }\n    } else {\n        throw new Error(`Cannot update ${c} as it is out of bounds for ${board}`)\n    }\n}\n\nexport function map<T, R>(board: Board<T>, f: (c: CubeCoords, v: T) => R): Board<R> {\n    const size = board.size\n    let data: Map<CubeCoordsAsString, R> = Map()\n\n    minusToPlusN(size, (x) => {\n        minusToPlusN(size, (y) => {\n            minusToPlusN(size, (z) => {\n                if (x + y + z === 0) {\n                    const c = cc(x, y, z)\n                    const key = cubeCoordsToString(c)\n                    const old = board.data.get(key)\n                    if (old) {\n                        data = data.update(key, () => f(c, old))\n                    }\n                }\n            })\n        })\n    })\n\n    return { data, size }\n}\n\nexport function mapToArray<T, R>(board: Board<T>, f: (c: CubeCoords, v: T) => R): R[] {\n    return flatMapToArray(board, (c, v) => [f(c, v)])\n}\n\nexport function flatMapToArray<T, R>(board: Board<T>, f: (c: CubeCoords, v: T) => R[]): R[] {\n    return A.range(-board.size, board.size).flatMap(x =>\n        A.range(-board.size, board.size).flatMap(y =>\n            A.range(-board.size, board.size).flatMap(z => {\n                if (x + y + z === 0) {\n                    const coords = cc(x, y, z)\n                    const value = board.data.get(cubeCoordsToString(coords))\n                    if (value === undefined) {\n                        throw new Error(`Expected to find ${coords}`)\n                    } else {\n                        return f(coords, value)\n                    }\n                } else {\n                    return []\n                }\n            })\n        )\n    )\n}\n\nexport function maxValue(board: GameBoard): CellValue {\n    const values = mapToArray(board, (c, v) => v.value)\n    return Math.max(...values) as CellValue\n}\n\nexport function filterCoordinates<T>(board: Board<T>, p: (v: T) => boolean): CubeCoords[] {\n    return flatMapToArray(board, (c, v) => p(v) ? [c] : [])\n}\n","import {CubeCoords, stringToCubeCoords} from '../hex-grids/cube-coords'\nimport {Cell, CellId, GameBoard} from './game-logic'\nimport {Timer} from '../../utils'\nimport {flatMapToArray, mapToArray} from './board'\nimport {Set} from 'immutable'\n\ninterface CellAdded {\n    kind: 'CellAdded',\n    coords: CubeCoords,\n    cell: Cell,\n    timer: Timer,\n}\n\ninterface CellMoved {\n    kind: 'CellMoved',\n    oldCoords: CubeCoords,\n    newCoords: CubeCoords,\n    cell: Cell,\n    timer: Timer,\n}\n\ninterface CellRemoved {\n    kind: 'CellRemoved',\n    coords: CubeCoords,\n    cell: Cell,\n    timer: Timer,\n}\n\nexport type DrawEvent = CellAdded | CellMoved | CellRemoved\n\nexport interface DrawEvents {\n    array: DrawEvent[], // was thinking of Map<CellId, DrawEvent[]> but did not make this change yet\n}\n\nexport function mergeDrawEvents(first: DrawEvents, second: DrawEvents): DrawEvents {\n    return {\n        array: [...first.array, ...second.array]\n    }\n}\n\nexport function calculateDrawEventsBetweenBoards(from: GameBoard, to: GameBoard, timer: Timer): DrawEvents {\n    const timer2 = addAnimationCycle(timer)\n    const timer3 = addAnimationCycle(timer2)\n\n    const fromCellIds: Set<CellId> = from.data.map((cell) => cell.id).toSet()\n    const toCellIds: Set<CellId> = to.data.map((cell) => cell.id).toSet()\n    const removed: Set<CellId> = fromCellIds.subtract(toCellIds)\n    const added: Set<CellId> = toCellIds.subtract(fromCellIds)\n    const stays: Set<CellId> = fromCellIds.intersect(toCellIds)\n\n    const removeds: DrawEvent[] = flatMapToArray(from, (c, v) => {\n        if (removed.contains((v.id))) {\n            return [{\n                kind: 'CellRemoved',\n                coords: c,\n                cell: v,\n                timer: timer,\n            }]\n        } else {\n            return []\n        }\n    })\n\n    const addeds: DrawEvent[] = flatMapToArray(to, (c, v) => {\n        if (added.contains(v.id)) {\n            return [{\n                kind: 'CellAdded',\n                coords: c,\n                cell: v,\n                timer: timer3,\n            }]\n        } else {\n            return []\n        }\n    })\n\n    const moveds: DrawEvent[] = flatMapToArray(from, (fromC, v) => {\n        if (stays.contains(v.id)) {\n            const existing = to.data.findEntry((cell) => cell.id === v.id)\n            if (existing) {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const [exS, ignored] = existing\n\n                return [{\n                    kind: 'CellMoved',\n                    cell: v,\n                    oldCoords: fromC,\n                    newCoords: stringToCubeCoords(exS),\n                    timer: timer2,\n                }]\n            } else {\n                return []\n            }\n        } else {\n            return []\n        }\n    })\n\n    return {array: [...removeds, ...addeds, ...moveds]}\n}\n\nexport const createEmptyDrawEvents = (): DrawEvents => ({array: []})\n\nexport function createInitialDrawEvents(board: GameBoard, timer: Timer): DrawEvents {\n    const array: DrawEvent[] = mapToArray(board, (c, v) => {\n        return {\n            kind: 'CellAdded',\n            coords: c,\n            cell: v,\n            timer: timer,\n        }\n    })\n    return {array}\n}\n\nexport function isRelevant(e: DrawEvent, timer: Timer): boolean {\n    switch (e.kind) {\n    case 'CellAdded':\n        return true\n    case 'CellMoved':\n        return true\n    case 'CellRemoved':\n        return timer <= addAnimationCycle(e.timer)\n    }\n}\n\nexport function removeObsoleteDrawEvents(drawEvents: DrawEvents, timer: Timer): DrawEvents {\n    // remove all those where CellRemoved events are old and no longer relevant\n    const ignoredCellIds: CellId[] = drawEvents.array.filter((event) =>\n        event.kind === 'CellRemoved' && addAnimationCycle(event.timer) > timer\n    ).map((e) => e.cell.id)\n\n    const newEvents = drawEvents.array.filter((e) => !ignoredCellIds.includes(e.cell.id))\n\n    return { array: newEvents }\n}\n\nconst AnimationCycleInMillis: Timer = 250 as Timer\nexport function addAnimationCycle(timer: Timer): Timer {\n    return timer + AnimationCycleInMillis as Timer\n}\n","import {AllDirections, Direction} from '../hex-grids/direction'\nimport {Brand, reversed, Timer} from '../../utils'\nimport {Board, mapSlicesByX, mapSlicesByY, mapSlicesByZ} from './board'\nimport {v4 as createUuid} from 'uuid'\nimport {calculateDrawEventsBetweenBoards, DrawEvents} from './draw-events'\n\nexport interface Cell {\n    id: CellId\n    value: CellValue\n}\n\nexport function newEmptyCell(): Cell {\n    return newCell(Zero)\n}\n\nexport function newCell(value: CellValue): Cell {\n    return {\n        id: createUuid() as CellId,\n        value,\n    }\n}\n\nexport function incrementCell(cell: Cell): Cell {\n    return updateCell(cell, cell.value + 1 as CellValue)\n}\n\nexport function updateCell(cell: Cell, newValue: CellValue): Cell {\n    return {\n        id: cell.id,\n        value: newValue,\n    }\n}\n\nexport type CellId = Brand<string, 'cell-id'>\nexport type CellValue = Brand<number, 'cell-value'>\n\nexport const Zero = 0 as CellValue\n\nexport type GameBoard = Board<Cell>\n\nfunction mapSlices(\n    board: GameBoard,\n    d: Direction,\n    f: (array: readonly Cell[]) => readonly Cell[],\n): GameBoard {\n    switch (d) {\n    case Direction.NW:\n        return mapSlicesByZ(board, f)\n    case Direction.SE:\n        return mapSlicesByZ(board, reversed(f))\n    case Direction.N:\n        return mapSlicesByX(board, f)\n    case Direction.S:\n        return mapSlicesByX(board, reversed(f))\n    case Direction.NE:\n        return mapSlicesByY(board, f)\n    case Direction.SW:\n        return mapSlicesByY(board, reversed(f))\n    }\n}\n\nconst allEmpty = (array: readonly Cell[]): boolean => array.every((q) => q.value === 0)\n\nfunction mergeAndMoveLeft(array: readonly Cell[]): readonly Cell[] {\n    if (array.length === 0) {\n        return array\n    } else if (allEmpty(array)) {\n        // just empty cells left\n        return array\n    } else {\n        const head = array[0]\n        const tail = array.slice(1)\n\n        if (head.value === 0) {\n            // left-most cell is empty so we squash it and continue\n            return [...mergeAndMoveLeft(tail), newEmptyCell()]\n        } else {\n            if (tail.length === 0) {\n                return [head]\n            } else if (allEmpty(tail)) {\n                return [head, ...tail]\n            } else {\n                // [head, next, ...remainder] === [head, tail] === array\n                const next = tail[0]\n                const remainder = tail.slice(1)\n\n                if (next.value === 0) {\n                    return mergeAndMoveLeft([head, ...remainder, newEmptyCell()])\n                } else {\n                    if (head.value === next.value) {\n                        const created = newCell(head.value + 1 as CellValue)\n                        return [created, ...mergeAndMoveLeft(remainder), newEmptyCell()]\n                    } else {\n                        return [head, ...mergeAndMoveLeft(tail)]\n                    }\n                }\n            }\n        }\n    }\n}\n\nconst mergeAndMoveInDirection = (board: GameBoard, direction: Direction): GameBoard =>\n    mapSlices(board, direction, mergeAndMoveLeft)\n\nexport function mergeAndMoveInDirectionWithDrawEvents(board: GameBoard, direction: Direction, timer: Timer): [GameBoard, DrawEvents] {\n    const newBoard = mergeAndMoveInDirection(board, direction)\n    const drawEvents = calculateDrawEventsBetweenBoards(board, newBoard, timer)\n    return [newBoard, drawEvents]\n}\n\nexport function toDisplay(n: CellValue): string {\n    return n ? `${Math.pow(2, n)}` : ''\n}\n\nexport function isGameOver(board: GameBoard): boolean {\n    return AllDirections.every((d) =>\n        mergeAndMoveInDirection(board, d).data.equals(board.data)\n    )\n}\n","import {BoardAction, NewStateActionKind} from './actions'\nimport {Game2048State} from './state'\nimport {Zero} from './game-logic'\nimport * as O from 'fp-ts/Option'\nimport {createEmptyDrawEvents} from './draw-events'\n\nconst initialState: Game2048State = {\n    board: O.none,\n    drawEvents: createEmptyDrawEvents(),\n    maxNumberSeen: Zero,\n    gameOver: false,\n    moves: 0,\n}\n\nexport function hex2048Reducer(state: Game2048State = initialState, action: BoardAction): Game2048State {\n    switch (action.type) {\n    case NewStateActionKind:    return action.payload\n    default:                    return state\n    }\n}\n","// eslint-disable-next-line max-len\nconst SadBeep = new Audio('data:audio/mpeg;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU1LjEyLjEwMAAAAAAAAAAAAAAA//uQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAAcAAAAIAAAOsAA4ODg4ODg4ODg4ODhVVVVVVVVVVVVVVVVxcXFxcXFxcXFxcXFxjo6Ojo6Ojo6Ojo6OqqqqqqqqqqqqqqqqqsfHx8fHx8fHx8fHx+Pj4+Pj4+Pj4+Pj4+P///////////////9MYXZmNTUuMTIuMTAwAAAAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//uQRAAAAn4Tv4UlIABEwirzpKQADP4RahmJAAGltC3DIxAAFDiMVk6QoFERQGCTCMA4AwLOADAtYEAMBhy4rBAwIwDhtoKAgwoxw/DEQOB8u8McQO/1Agr/5SCDv////xAGBOHz4IHAfBwEAQicEAQBAEAAACqG6IAQBAEAwSIEaNHOiAUCgkJ0aOc/a6MUCgEAQDBJAuCAIQ/5cEAQOCcHAx1g+D9YPyjvKHP/E7//5QEP/+oEwf50FLgApF37Dtz3P3m1lX6yGruoixd2POMuGLxAw8AIonkGyqamRBNxHfz+XRzy1rMP1JHVDJocoFL/TTKBUe2ShqdPf+YGleouMo9zk////+r33///+pZgfb/8a5U/////9Sf////KYMp0GWFNICTXh3idEiGwVhUEjLrJkSkJ9JcGvMy4Fzg2i7UOZrE7tiDDeiZEaRTUYEfrGTUtFAeEuZk/7FC84ZrS8klnutKezTqdbqPe6Dqb3Oa//X6v///qSJJ//yybf/yPQ/nf///+VSZIqROCBrFtJgH2YMHSguW4yRxpcpql//uSZAuAAwI+Xn9iIARbC9v/57QAi/l7b8w1rdF3r239iLW6ayj8ou6uPlwdQyxrUkTzmQkROoskl/SWBWDYC1wAsGxFnWiigus1Jj/0kjgssSU1b/qNhHa2zMoot9NP/+bPzpf8p+h3f//0B4KqqclYxTrTUZ3zbNIfbxuNJtULcX62xPi3HUzD1JU8eziFTh4Rb/WYiegGIF+CeiYkqat+4UAIWat/6h/Lf/qSHs3Olz+s9//dtEZx6JLV6jFv/7//////+xeFoqoJYEE6mhA6ygs11CpXJhA8rSSQbSlMdVU6QHKSR0ewsQ3hy6jawJa7f+oApSwfBIr/1AxAQf/8nBuict8y+dE2P8ikz+Vof/0H4+k6tf0f/6v6k/////8qKjv/1BIam6gCYQjpRBQav4OKosXVrPwmU6KZNlen6a6MB5cJshhL5xsjwZrt/UdFMJkPsOkO0Qp57smlUHeDBT/+swC8hDfv8xLW50u/1r//s3Ol/V9v///S/////yYSf/8YN5mYE2RGrWXGAQDKHMZIOYWE0kNTx5qkxvtMjP/7kmQOAAMFXl5582t2YYvrnz5qbowhfX/sQa3xf6+u/Pi1uiPOmcKJXrOF5EuhYkF1Bbb/3EAiuOWJocX9kycBtMDLId5o7P+pMDYRv1/mDdaP8ul39X1X5IDHrt1o///9S/////85KVVbuCOQNeMpICJ81DqHDGVCurLAa/0EKVUsmzQniQzJVY+w7Nav+kDexOCEgN7iPiImyBmYImrmgCQAcVltnZv2IQsAXL9vqLPlSb+Qk3/6K3MFb+v//b+n////+UJW//Sc1mSKuyRZwAEkXLIQJXLBl6otp8KPhiYHYh+mEAoE+gTBfJgeNItsdG6GYPP/1FkQFHsP3IOPLtavWEOGMf/WThMwEWCpNm6y/+Y+s//OH/1/u/OGX////6v////+bCSoHMzMgsoTebSaIjVR6lKPpG7rCYWmN+jRhtGuXiHi57E0XETEM7EAUl/9IdINsg8wIAAQBmS8ipal6wx8BnH//UYhNzT9L8lH51v6m//u3IhI1r9aP///V/////0iQ//pC87YAWAKKWAQA67PwQ2iCdsikVY4Ya//+5JkC4ADTmzX+01rcFLry/8+DW/OgbNV7NINwQ6e7nTWtXLHHhydAAxwZFU1lQttM3pgMwP6lqdB/rIgABAaxBRnKSLo/cB2hFDz/9MxDiD2l6yh9RTflZKf1Jfr/RfkQYWtL6P///V/////w/icFn///7lAwJp2IBpQ4NESCKe1duJchO8QoLN+zCtDqky4WiQ5rhbUb9av+oQljfDBZdPstVJJFIMSgXUXu39EFGQG//JZus//OG/6X6Lc4l/////t/////Kx4LWYoAQABgwQAGWtOU1f5K1pzNGDvYsecfuce4LdBe8iBuZmBmVdZJVAmuCk8tt/qOi8Ax4QjgywDYEMM0dkkUkqQ1gGCpaf/nTgoQH36vpkMflE7/KRj+k/0n5DiDPS+3///qf////7JizRCya////WaGLygCl0lqppwAH1n/pGM6MCPFK7JP2qJpsz/9EfgHUN4bYUo8kVfxZDd/9ZqXSi31/WXW51D+ZG37/pNycMDbnf///+JaiWbxwJAADEAgAWBoRJquMpaxJQFeTcU+X7VxL3MGIJe//uSZBAABBVs0ftaa3BCS+udTaVvjLV5W+w1rdk5r6x89rW+Bx4xGI3LIG/dK42coANwBynnsZ4f//+t3GfrnRJKgCTLdi1m1ZprMZymUETN4tj3+//9FQEMDmX9L5qVmlaiKVfx3FJ/mH5dfphw6b////60P////qWkMQEfIZq////sMESP4H4fCE0SSBAnknkX+pZzSS2dv1KPN/6hdAJUhIjzKL1L2sDqST/+gwF//ir8REf5h35f2bmDz3//////////jAGKcREwKMQI+VWsj7qNCFp0Zk9ibgh82rKj/JEIFmShuSZMMxk6Jew7BLOh/6wWk1EaAK4nJszopGpdUYh9EYN2/0zQYYnhvJt1j1+pPzpr/TKHXs3z6WdE1N0pm/o///9f/////MpkiIiBeCALJpkgpbKFme7rvPs1/vwM0yWmeNn75xH/+BkEIWITktZ+ijXEi//nC8XQ8v9D5wez86Xv6SL/Lv5ePcrIOl////1/////84bPG1/BwAHSMrAmlSw9S3OfrGMy51bTgmVmHAFtAmCmRg2s1LzmAP/7kmQSgAM9Xs5rM2twXG2Z70IKbg09fT2nva3xgq/mtRe1ui8AFVGaC/9EawNnhihesNgE5E6kir3GVFlof+tEQEpf/rMH50lv5WPH6k2+XX4JUKRpn9Xq//+7f////x3CyAX/4LIzvDgdgAEbFbAc0rGqTO2p1zoKA22l8tFMiuo2RRBOMzZv+mUA2MiAyglI3b9ZwZ0G7jqlt/OcDIKX+/1NblSX+VKfQfP8xuJJGk7////rf////+PgXTv///1JThJJQainmySAB6imUyuVbVttUo7T4Csa821OuF88f62+CZHFnGf///mQgYIEO0SMF2NVy9NxYTdlqJ8AuS4zr//SJoTUJ+CaKKTcZvosrUPo8W/MUv0f033E9E/QpN6P///v/////WRR2mwUAYUABjabRu1vrOLKAF0kIdHjnEx/iNWo7jGn1////mApxNTJQQOU1Het/NoUFTMQs6Vja///THaGIl/0fojl8mjd/Jo8W+ZfpNpCajsz7////6kn/////WRRgDz//LD1KSTDjKOciSAKxdLx5S31uYqKIWj/+5JECgAC8V5M6g9rdFyr6Vo9rW6KtHcr5DEJQRkSpLRklSigvVc4QpmyPe9H3zHR1/in9P/8VNCMJOzYUDyVjfwHP0ZgiZt/3/+9EBnDKbegdUrckhgntHaQ9vX/X/9A/////+r/////mJ3/9ItRcoVRogAcmV9N8z0pvES8QQsKoMGXEymPQyWm6E4HQLqgpv/CZJAtYXQSwoF8e6SB56zABEoW+qgZjJAZovGr0Gl5/OjFKL3JwnaX9v7/X8y1f/////////49WAzMzEYYMZLq6CUANIqbDX7lisBIdraAEPwShTRc9WZ2vAqBc4NQ9GrUNaw0Czcrte0g1NEoiU8NFjx4NFh54FSwlOlgaCp0S3hqo8SLOh3/63f7P/KgKJxxhgGSnAFMCnIogwU5JoqBIDAuBIiNLETyFmiImtYiDTSlb8ziIFYSFv/QPC38zyxEOuPeVGHQ77r/1u/+kq49//6g4gjoVQSUMYQUSAP8PwRcZIyh2kCI2OwkZICZmaZxgnsNY8DmSCWX0idhtz3VTJSqErTSB//1X7TTTVVV//uSZB2P8xwRJ4HvYcItQlWBACM4AAABpAAAACAAADSAAAAEVf/+qCE000VVVVU0002//+qqqqummmmr///qqqppppoqqqqppppoqqATkEjIyIxBlBA5KwUEDBBwkFhYWFhUVFfiqhYWFhcVFRUVFv/Ff/xUVFRYWFpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==')\n\nexport async function playWarningSound() {\n    return SadBeep.play()\n}\n","import {CellValue, GameBoard, Zero} from '../game-logic'\nimport {CubeCoords} from '../../hex-grids/cube-coords'\nimport {filterCoordinates} from '../board'\n\nfunction rng(): number {\n    return Math.random()\n}\n\nfunction pickRandomN<T>(array: readonly T[], n: number): T[] {\n    return array\n        .map((a) => ({order: rng(), value: a}))\n        .sort((a, b) => a.order - b.order)\n        .map((a) => a.value)\n        .slice(0, n)\n}\n\nexport async function locallyPickRandomlyAddedValues(board: GameBoard): Promise<[CubeCoords, CellValue][]> {\n    const empty: CubeCoords[] = filterCoordinates(board, (v) => v.value === Zero)\n    const selectedCoords: CubeCoords[] = pickRandomN(empty, 2)\n    const selectedValue: CellValue = (rng() > 0.5 ? 1 : 2) as CellValue // either 2^1 == 2 or 2^2 == 4\n    return selectedCoords.map((c) => [c, selectedValue])\n}\n","import {CellValue, GameBoard, Zero} from '../game-logic'\nimport {cc, CubeCoords} from '../../hex-grids/cube-coords'\nimport {filterCoordinates} from '../board'\n\nconst Port = 13337\nconst Host = 'localhost'\n\ninterface Dto {\n    x: number\n    y: number\n    z: number\n    value: number\n}\n\nfunction toDto(c: CubeCoords, value: number): Dto {\n    return {\n        x: c.x,\n        y: c.y,\n        z: c.z,\n        value: Math.pow(value, 2),\n    }\n}\n\nfunction fromDto(dto: Dto): [CubeCoords, CellValue] {\n    const value = Math.log2(dto.value)\n    return [cc(dto.x, dto.y, dto.z), value as CellValue]\n}\n\nexport async function remotelyPickRandomlyAddedValues(board: GameBoard): Promise<[CubeCoords, CellValue][]> {\n    const full = filterCoordinates(board, (v) => v.value !== Zero)\n    return fetch(\n        `//${Host}:${Port}/${board.size + 1}`,\n        {\n            method: 'POST',\n            body: JSON.stringify(full.map((c, q) => toDto(c, q))),\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n    )\n        .then(async (r) => {\n            if (r.ok) {\n                return r.json()\n                    .catch((err) => {\n                        console.log(err)\n                        return Promise.reject(err)\n                    })\n            } else {\n                console.log(r)\n                const text = await r.text()\n                throw new Error('Network response was not ok:' + text)\n            }\n        })\n        .then((dtos) =>\n            dtos as Dto[]\n        )\n        .then((dtos) =>\n            dtos.map(fromDto)\n        )\n        .catch((err) => {\n            console.error(err)\n            return Promise.reject(err)\n        })\n}\n","import {locallyPickRandomlyAddedValues} from './locally-pick-new-values'\nimport {remotelyPickRandomlyAddedValues} from './remotely-pick-new-values'\nimport {GameBoard} from '../game-logic'\n\nenum PickRandomlyAddedValues {\n    Locally,\n    Remotely,\n}\n\nconst selectedPickRandomlyAddedValues: PickRandomlyAddedValues = PickRandomlyAddedValues.Locally as PickRandomlyAddedValues\n\nexport function pickRandomlyAddedValues(board: GameBoard) {\n    switch (selectedPickRandomlyAddedValues) {\n    case PickRandomlyAddedValues.Locally:   return locallyPickRandomlyAddedValues(board)\n    case PickRandomlyAddedValues.Remotely:  return remotelyPickRandomlyAddedValues(board)\n    }\n}\n","import {createBoard, maxValue, Size, updated} from './board'\nimport {Game2048State} from './state'\nimport {\n    Cell,\n    CellValue,\n    GameBoard,\n    isGameOver,\n    mergeAndMoveInDirectionWithDrawEvents, newCell,\n    newEmptyCell,\n} from './game-logic'\nimport * as O from 'fp-ts/Option'\nimport {Direction} from '../hex-grids/direction'\nimport {playWarningSound} from './audio'\nimport {Middleware} from 'redux'\nimport {BoardAction, MoveActionKind, NewLevelKind, newStateAction} from './actions'\nimport {RootState} from '../../app/store'\nimport {pickRandomlyAddedValues} from './pick-new-values/pick-new-values'\nimport {\n    addAnimationCycle, calculateDrawEventsBetweenBoards,\n    createInitialDrawEvents,\n    DrawEvents,\n    mergeDrawEvents, removeObsoleteDrawEvents,\n} from './draw-events'\nimport {CubeCoords} from '../hex-grids/cube-coords'\nimport {currentTimer, Timer} from '../../utils'\n\nexport const middleware: Middleware<\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    {}, // legacy type parameter added to satisfy interface signature\n    RootState\n    > = store => next => (action: BoardAction) => {\n        switch (action.type) {\n        case MoveActionKind:\n            return performMoveAction(store.getState().hex2048, action.payload)\n                .then((result) =>\n                    store.dispatch(newStateAction(result))\n                )\n        case NewLevelKind:\n            return performNewLevel(action.payload)\n                .then((result) =>\n                    store.dispatch(newStateAction(result))\n                )\n        default:\n            return next(action)\n        }\n    }\n\nasync function addRandomValues(board: GameBoard, timer: Timer): Promise<[GameBoard, DrawEvents]> {\n    return pickRandomlyAddedValues(board)\n        .then((picked) => {\n            const pickedCells: [CubeCoords, Cell][] = picked.map(([c, v]) => [c, newCell(v)])\n\n            const newBoard = pickedCells.reduce(\n                (acc, [c, v]) =>\n                    updated(acc, c, () => v),\n                board,\n            )\n\n            const drawEvents: DrawEvents = calculateDrawEventsBetweenBoards(board, newBoard, timer)\n\n            return [newBoard, drawEvents]\n        })\n}\n\nasync function performNewLevel(size: Size): Promise<Game2048State> {\n    const timer = currentTimer()\n    const emptyBoard = createBoard(size, newEmptyCell)\n    const emptyDrawEvents = createInitialDrawEvents(emptyBoard, timer)\n    const [withAddedValues, addingDrawEvents] = await addRandomValues(emptyBoard, addAnimationCycle(timer))\n    const merged = mergeDrawEvents(emptyDrawEvents, addingDrawEvents)\n\n    return {\n        board: O.some(withAddedValues),\n        drawEvents: merged,\n        maxNumberSeen: maxValue(withAddedValues),\n        gameOver: false,\n        moves: 0,\n    }\n}\n\nasync function performMoveAction(state: Game2048State, direction: Direction): Promise<Game2048State> {\n    const timer = currentTimer()\n\n    const board = O.fold(\n        () => {throw new Error('Expected to have state')},\n        (board: GameBoard) => board,\n    )(state.board)\n\n    const [newBoard, moveDrawEvents] = mergeAndMoveInDirectionWithDrawEvents(board, direction, timer)\n\n    if (newBoard.data.equals(board.data)) { // nothing changed\n        return playWarningSound()\n            .then(() => state)\n    } else {\n        const maxOnThis = maxValue(newBoard)\n        const maxNumberSeen = Math.max(state.maxNumberSeen, maxOnThis) as CellValue\n        const laterTimer = addAnimationCycle(addAnimationCycle(timer))\n        const [withAddedValues, addingDrawEvents] = await addRandomValues(newBoard, laterTimer)\n        const mergedDrawEvents1 = mergeDrawEvents(state.drawEvents, moveDrawEvents)\n        const mergedDrawEvents2 = mergeDrawEvents(mergedDrawEvents1, addingDrawEvents)\n\n        const removedDrawEvents = removeObsoleteDrawEvents(mergedDrawEvents2, laterTimer)\n        return {\n            maxNumberSeen,\n            board: O.some(withAddedValues),\n            drawEvents: removedDrawEvents,\n            gameOver: isGameOver(withAddedValues),\n            moves: state.moves + 1,\n        }\n    }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport {useDispatch} from 'react-redux'\nimport {hex2048Reducer} from '../features/hex2048-game/reducer'\nimport {middleware} from '../features/hex2048-game/middleware'\n\nconst rootReducer = combineReducers({\n    hex2048: hex2048Reducer,\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(middleware))\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport const hex2048Selector = (state: RootState) => state.hex2048\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>() // Export a hook that can be reused to resolve types\n","import React from 'react'\nimport {useAppDispatch} from '../../app/store'\nimport {Size} from './board'\nimport {newLevelAction} from './actions'\n\nexport function LevelSelectionButtons() {\n    const dispatch = useAppDispatch()\n\n    return (\n        <div className='buttons has-addons'>\n            <button className='button' disabled={true}>\n                New Level\n            </button>\n            {[1, 2, 3, 4, 5].map((level) =>\n                (<button\n                    className='button'\n                    key={level}\n                    onClick={() => dispatch(newLevelAction(level as Size))}\n                >\n                    {level}\n                </button>)\n            )}\n        </div>\n    )\n}\n","import {CellValue} from './game-logic'\nimport {ColorString} from '../../utils'\n\nconst Colors = [\n    '#D0D0D0', // empty\n    '#B0D8A4', // 2\n    '#CADB9E', // 4\n    '#E4DE97', // 8\n    '#FEE191', // 16\n    '#FEC181', // 32\n    '#FDA070', // 64\n    '#FD8060', // 128\n    '#F9715E', // 256\n    '#F4615C', // 512\n    '#F0525A', // 1024\n    '#EB4258', // 2048\n]\n\nexport function backgroundOf(n: CellValue): ColorString {\n    return Colors[n] as ColorString || Colors[Colors.length - 1] as ColorString\n}\n","import {CubeCoords} from './cube-coords'\n\nexport interface XY {\n    x: number\n    y: number\n}\n\nexport function flatHexToPixels(cc: CubeCoords): XY {\n    const x = (3 / 2 * cc.x)\n    const y = Math.sqrt(3) / 2 * cc.x + Math.sqrt(3) * cc.z\n    return { x, y }\n}\n","import React, {CSSProperties} from 'react'\nimport * as O from 'fp-ts/Option'\nimport {CubeCoords, dominantDirection} from '../../../hex-grids/cube-coords'\nimport {Cell, toDisplay} from '../../game-logic'\nimport {Size} from '../../board'\nimport {Direction} from '../../../hex-grids/direction'\nimport {backgroundOf} from '../../colors'\nimport {flatHexToPixels} from '../../../hex-grids/conversions'\n\ninterface HexProps {\n    coords: CubeCoords,\n    cell: Cell,\n    boardSize: Size,\n    onClick: (d: Direction) => void,\n}\n\nexport function Hex(props: HexProps) {\n    const c = props.coords\n    const q = props.cell\n\n    const direction = dominantDirection(c)\n    const cursor = O.fold<Direction, string>(\n        () => 'not-allowed',\n        (d) => `${d.toLowerCase()}-resize`\n    )(direction)\n\n    const xy = flatHexToPixels(c)\n\n    const boardSize = props.boardSize * 2 + 1\n    const convert = (n: number): number => (n / boardSize) / 2 + 0.5\n\n    const centerY = convert(xy.y)\n    const centerX = convert(xy.x)\n    const size = (1 / boardSize) * (Math.sqrt(3) / 2)\n    const top = centerY - (size / 2)\n    const left = centerX - (size / 2)\n\n    const toPercent = (n: number): string => (n * 100) + '%'\n\n    const cssProperties: CSSProperties = ({\n        backgroundColor: backgroundOf(q.value),\n        cursor: cursor,\n        top: toPercent(top),\n        left: toPercent(left),\n        width: toPercent(size),\n        height: toPercent(size),\n    })\n    const rendered: string = toDisplay(q.value)\n    const onClick = O.fold(() => undefined, (d: Direction) => () => props.onClick(d))(direction)\n    const fontSize = `${Math.floor((1 / boardSize) * 20)}vw`\n\n    return (<div\n        id={q.id}\n        data-x={c.x}\n        data-y={c.y}\n        data-z={c.z}\n        data-value={rendered}\n        className=\"hex\"\n        style={cssProperties}\n        onClick={onClick}\n    >\n        <span className='hex-text' style={{fontSize: fontSize}}>{rendered}</span>\n    </div>)\n}\n\n","import React from 'react'\nimport {Hex} from './Hex'\nimport {mapToArray} from '../../board'\nimport {Direction} from '../../../hex-grids/direction'\nimport {GameBoard} from '../../game-logic'\nimport './DivBasedBoard.scss'\n\ninterface DivBasedBoardProps {\n    board: GameBoard,\n    onClick: (d: Direction) => void,\n}\n\nexport function DivBasedBoard(props: DivBasedBoardProps) {\n    const {board, onClick} = props\n    return (\n        <div className='hex-grid'>\n            {\n                mapToArray(board, (c, v) =>\n                    <Hex\n                        key={v.id}\n                        coords={c}\n                        cell={v}\n                        boardSize={board.size}\n                        onClick={onClick}\n                    />\n                )\n            }\n        </div>\n    )\n}\n","import React, {useEffect, useLayoutEffect, useRef, useState} from 'react'\nimport {XY} from '../../../hex-grids/conversions'\nimport {currentTimer} from '../../../../utils'\n\ninterface CanvasProps {\n    draw: (context: CanvasRenderingContext2D, timer: number) => void,\n    width: string,\n    height: string,\n    onClick?: (xy: XY) => void,\n    onMouseMove?: (xy: XY) => void,\n    currentCursor?: () => string,\n}\n\nexport function Canvas(props: CanvasProps) {\n    const {draw} = props\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n    const divRef = useRef<HTMLDivElement>(null)\n\n    const [width, setWidth] = useState(0)\n    const [height, setHeight] = useState(0)\n    const pixelRatio = window.devicePixelRatio\n\n    function handleResize() {\n        if (divRef.current) {\n            setWidth(divRef.current.clientWidth)\n            setHeight(divRef.current.clientHeight)\n        }\n    }\n\n    useEffect(() => {\n        handleResize()\n        window.addEventListener('resize', handleResize)\n        return () => window.removeEventListener('resize', handleResize)\n    })\n\n    useLayoutEffect(() => {\n        const canvas = canvasRef.current\n        if (canvas) {\n            const context = canvas.getContext('2d')\n\n            if (context) {\n                const render = (timer: number) => {\n                    draw(context, timer)\n                    return window.requestAnimationFrame(render)\n                }\n\n                const animationFrameId = render(currentTimer())\n\n                return () => {\n                    if (animationFrameId) {\n                        window.cancelAnimationFrame(animationFrameId)\n                    }\n                }\n            }\n        }\n\n\n    }, [draw])\n\n    const displayWidth = Math.floor(pixelRatio * width)\n    const displayHeight = Math.floor(pixelRatio * height)\n    const style = { width, height }\n\n    function onMouseMove(e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (props.onMouseMove && canvasRef.current) {\n            const bounding = canvasRef.current.getBoundingClientRect()\n            props.onMouseMove({\n                x: (e.clientX - bounding.left) * pixelRatio,\n                y: (e.clientY - bounding.top) * pixelRatio,\n            })\n        }\n\n        if (props.currentCursor && canvasRef.current) {\n            canvasRef.current.style.cursor = props.currentCursor()\n        }\n    }\n\n    function onClick(e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (props.onClick && canvasRef.current) {\n            const bounding = canvasRef.current.getBoundingClientRect()\n            props.onClick({\n                x: (e.clientX - bounding.left) * pixelRatio,\n                y: (e.clientY - bounding.top) * pixelRatio,\n            })\n        }\n    }\n\n    return (\n        <div style={{ width: props.width, height: props.height }} ref={divRef}>\n            <canvas\n                ref={canvasRef}\n                width={displayWidth}\n                height={displayHeight}\n                style={style}\n                onMouseMove={onMouseMove}\n                onClick={onClick}\n            />\n        </div>\n    )\n}\n","import {CubeCoords, X, Y, Z} from '../hex-grids/cube-coords'\nimport {Cell, CellId} from './game-logic'\nimport {addAnimationCycle, DrawEvent, DrawEvents, isRelevant} from './draw-events'\nimport {Timer} from '../../utils'\nimport {Map} from 'immutable'\nimport {convert} from '../../utils'\n\nexport interface Drawable {\n    position: CubeCoords,\n    cell: Cell,\n    opacity: number,\n}\n\nconst createDrawable = (position: CubeCoords, cell: Cell, opacity: number): Drawable =>\n    ({position, cell, opacity})\n\nfunction eventToDrawable(event: DrawEvent, timer: Timer): Drawable {\n    const startTimer = event.timer\n    const finishTimer = addAnimationCycle(startTimer)\n\n    switch (event.kind) {\n    case 'CellAdded':\n        return createDrawable(event.coords, event.cell, convert(timer, startTimer, finishTimer, 0, 1))\n    case 'CellMoved':\n    {\n        const oldCoords = event.oldCoords\n        const newCoords = event.newCoords\n\n        const f = (extract: (c: CubeCoords) => number): number =>\n            convert(timer, startTimer, finishTimer, extract(oldCoords), extract(newCoords))\n\n        const coords = {\n            x: f((q) => q.x) as X,\n            y: f((q) => q.y) as Y,\n            z: f((q) => q.z) as Z,\n        }\n\n        return createDrawable(coords, event.cell, 1)\n    }\n    case 'CellRemoved':\n        return createDrawable(event.coords, event.cell, 1 - convert(timer, startTimer, finishTimer, 0, 1))\n    }\n}\n\nexport function createDrawables(events: DrawEvents, timer: Timer): Drawable[] {\n    function addToState(acc: Map<CellId, DrawEvent>, event: DrawEvent): Map<CellId, DrawEvent> {\n        if (event.timer > timer) { // future event, we ignore for now\n            return acc\n        } else {\n            const existing = acc.get(event.cell.id)\n            if (existing) {\n                if (event.timer > existing.timer) {\n                    return acc.set(event.cell.id, event)\n                } else {\n                    return acc\n                }\n            } else {\n                return acc.set(event.cell.id, event)\n            }\n        }\n    }\n\n    const m = events.array.filter((e) => isRelevant(e, timer)).reduce(addToState, Map<CellId, DrawEvent>())\n    const arr = m.toArray()\n    arr.sort(([aI, aE], [bI, bE]) => aE.timer - bE.timer)\n    return arr.map(([k, v]) => eventToDrawable(v, timer))\n}\n","import React, {useRef} from 'react'\nimport {GameBoard, toDisplay} from '../../game-logic'\nimport {mapToArray} from '../../board'\nimport {Direction} from '../../../hex-grids/direction'\nimport {CubeCoords, dominantDirection} from '../../../hex-grids/cube-coords'\nimport {Canvas} from './Canvas'\nimport {flatHexToPixels, XY} from '../../../hex-grids/conversions'\nimport {backgroundOf} from '../../colors'\nimport {centeredText, createHexPath, drawCircle, fillHex} from './drawing'\nimport * as O from 'fp-ts/lib/Option'\nimport * as P from 'fp-ts/pipeable'\nimport {DrawEvents} from '../../draw-events'\nimport {createDrawables, Drawable} from '../../drawable'\nimport {convert, mixColors, currentTimer, Timer, ColorString} from '../../../../utils'\n\ninterface CanvasBasedBoardProps {\n    board: GameBoard,\n    drawEvents: DrawEvents,\n    onClick: (d: Direction) => void,\n}\n\nexport function CanvasBasedBoard(props: CanvasBasedBoardProps) {\n    const {board, drawEvents} = props\n\n    const mousePosition = useRef<XY>({x: 0, y: 0})\n    const selectedCell = useRef<O.Option<CubeCoords>>(O.none)\n    const currentCursor = useRef<string>('')\n\n    function onMouseMove(xy: XY) {\n        mousePosition.current = xy\n    }\n\n    function onClick() {\n        P.pipe(\n            O.fromNullable(selectedCell.current),\n            O.flatten,\n            O.chain((xy) => dominantDirection(xy)),\n            O.map((d) => props.onClick(d))\n        )\n    }\n\n    // TODO: CPU utilisation / \"long tasks\"\n    // TODO: move & merge animations\n    const draw = (ctx: CanvasRenderingContext2D, timer: number) => {\n        const drawables = createDrawables(drawEvents, timer as Timer)\n        // console.log(timer, drawEvents.array, drawables)\n\n        const w = ctx.canvas.width\n        const h = ctx.canvas.height\n        const minDim = Math.min(w, h)\n        const centerPoint = { x: w / 2, y: h / 2 }\n\n        const boardSize = board.size * 2 + 1\n\n        const convertF = (n: number): number => convert(n, -boardSize, +boardSize, 0, minDim)\n        const convertXY = (xy: XY): XY => ({\n            x: convertF(xy.x),\n            y: convertF(xy.y),\n        })\n\n        ctx.clearRect(0, 0, w, h)\n\n        const BaseBackground = '#f0f0f0' as ColorString\n        drawCircle(ctx, centerPoint, minDim, BaseBackground) // base circle\n\n        function drawHex(drawable: Drawable) {\n            const c = drawable.position\n            const q = drawable.cell\n            const xy = flatHexToPixels(c)\n\n            const screenXY = convertXY(xy)\n            const size = (1 / boardSize) * minDim\n            const path = createHexPath(screenXY, size)\n\n            const selected = mousePosition.current ? ctx.isPointInPath(path, mousePosition.current.x, mousePosition.current.y) : false\n            if (selected) {\n                selectedCell.current = O.some(c)\n\n                const direction = dominantDirection(c)\n                currentCursor.current = O.fold<Direction, string>(\n                    () => 'not-allowed',\n                    (d) => `${d.toLowerCase()}-resize`\n                )(direction)\n            }\n\n            const opacity = drawable.opacity\n            const background = backgroundOf(q.value)\n            const adjustedBackground = mixColors(background, opacity, BaseBackground)\n            fillHex(ctx, path, adjustedBackground, selected)\n\n            const rendered = toDisplay(q.value)\n            const TextSizes = [1, 0.75, 0.5, 0.4, 0.3]\n            const TextColor = '#010101' as ColorString\n            const textAdjustedColor = mixColors(TextColor, opacity, BaseBackground)\n            centeredText(ctx, rendered, size * TextSizes[rendered.length] || 0.2, textAdjustedColor, screenXY.x, screenXY.y)\n        }\n\n        drawables.forEach(drawHex)\n\n        const elapsed = currentTimer() - timer\n        if (elapsed > 100) {\n            console.log(`Draw in ${elapsed} ms`)\n        }\n    }\n\n    function getCurrentCursor() {\n        return currentCursor.current || ''\n    }\n\n    return (<div style={{padding: '1em'}}>\n        <Canvas\n            draw={draw}\n            width='80vmin'\n            height='80vmin'\n            onClick={onClick}\n            onMouseMove={onMouseMove}\n            currentCursor={getCurrentCursor}\n        />\n        {mapToArray(board, (coords, cell) => {\n            const displayValue = toDisplay(cell.value)\n            return (<div\n                className='button'\n                key={cell.id}\n                data-x={coords.x}\n                data-y={coords.y}\n                data-z={coords.z}\n                data-value={displayValue}\n                style={{display: 'none'}}\n            >\n                {displayValue}\n            </div>)\n        })}\n    </div>)\n}\n","import {XY} from '../../../hex-grids/conversions'\n\nexport function createHexPath(xy: XY, size: number): Path2D {\n    const path = new Path2D()\n    const ABitSmaller = 3 // make it a bit smaller so they don't overwrite each other\n    const r = (size / 2) - ABitSmaller\n    const a = 2 * Math.PI / 6\n    for (let i = 0; i <= 6; i++) {\n        path.lineTo(xy.x + r * Math.cos(a * i), xy.y + r * Math.sin(a * i))\n    }\n    return path\n}\n\nexport function fillHex(ctx: CanvasRenderingContext2D, path: Path2D, background: string, selected: boolean) {\n    ctx.beginPath()\n    ctx.lineWidth = selected ? 6 : 1\n    ctx.strokeStyle = selected ? '#000000' : '#404040'\n    ctx.stroke(path)\n\n    ctx.fillStyle = background\n    ctx.fill(path)\n    ctx.closePath()\n}\n\nexport function drawCircle(ctx: CanvasRenderingContext2D, xy: XY, diameter: number, background: string) {\n    ctx.fillStyle = background\n    ctx.beginPath()\n    ctx.arc(xy.x, xy.y, diameter / 2, 0, 2 * Math.PI)\n    ctx.closePath()\n    ctx.fill()\n}\n\nexport function centeredText(ctx: CanvasRenderingContext2D, text: string, textSize: number, fillColor: string, centerX: number, centerY: number) {\n    ctx.fillStyle = fillColor\n    ctx.font = Math.floor(textSize) + 'px Monaco'\n    const measured = ctx.measureText(text)\n    const VerticalCenteringCoef = 0.37 // approximation\n    ctx.fillText(text, centerX - measured.width / 2, centerY + textSize * VerticalCenteringCoef)\n}\n\n","import React, {KeyboardEvent, useEffect, useRef} from 'react'\nimport {hex2048Selector, useAppDispatch} from '../../app/store'\nimport {LevelSelectionButtons} from './LevelSelectionButtons'\nimport './Game.scss'\nimport {Direction} from '../hex-grids/direction'\nimport {useSelector} from 'react-redux'\nimport {GameBoard, toDisplay} from './game-logic'\nimport {backgroundOf} from './colors'\nimport {Game2048State} from './state'\nimport {moveAction} from './actions'\nimport * as O from 'fp-ts/Option'\nimport {DivBasedBoard} from './board/div-based/DivBasedBoard'\nimport {CanvasBasedBoard} from './board/canvas-based/CanvasBasedBoard'\n\nexport function Game() {\n    const dispatch = useAppDispatch()\n    const hex2048: Game2048State = useSelector(hex2048Selector)\n    const {maxNumberSeen, gameOver, moves} = hex2048\n\n    function handleKeyDown<T>(e: KeyboardEvent<T>) {\n        if (e.code === 'KeyS') {\n            dispatch(moveAction(Direction.S))\n        } else if (e.code === 'KeyD') {\n            dispatch(moveAction(Direction.SE))\n        } else if (e.code === 'KeyA') {\n            dispatch(moveAction(Direction.SW))\n        } else if (e.code === 'KeyW') {\n            dispatch(moveAction(Direction.N))\n        } else if (e.code === 'KeyQ') {\n            dispatch(moveAction(Direction.NW))\n        } else if (e.code === 'KeyE') {\n            dispatch(moveAction(Direction.NE))\n        }\n    }\n\n    const container = useRef<HTMLDivElement>(null)\n\n    useEffect(() => container.current?.focus())\n\n    function hexClicked(direction: Direction) {\n        dispatch(moveAction(direction))\n    }\n\n    enum RenderType {\n        DivBased,\n        CanvasBased,\n    }\n\n    const renderType = RenderType.CanvasBased as RenderType\n\n    const renderBoard = O.fold(\n        () => <div className='notification is-info'>Select a level</div>,\n        (board: GameBoard) => {\n            switch (renderType) {\n            case RenderType.DivBased:\n                return <DivBasedBoard board={board} onClick={hexClicked}/>\n            case RenderType.CanvasBased:\n                return <CanvasBasedBoard board={board} drawEvents={hex2048.drawEvents} onClick={hexClicked}/>\n            }\n            // For debug to compare we render things correctly:\n            // return (<>\n            //     <CanvasBasedBoard board={board} drawEvents={hex2048.drawEvents} onClick={hexClicked}/>\n            //     <DivBasedBoard board={board} onClick={hexClicked}/>\n            // </>)\n        }\n    )(hex2048.board)\n\n    return (\n        <div ref={container} className='container game-board' tabIndex={-1} onKeyDown={handleKeyDown}>\n            <LevelSelectionButtons/>\n            {renderBoard}\n            {gameOver ? <div className='notification is-danger'>Game over!</div> : null}\n            <div className='notification is-normal'>\n                <span className='has-text-weight-bold'>{moves}</span>\n                &nbsp;moves made. Maximum number seen:&nbsp;\n                <span\n                    className='has-text-weight-bold'\n                    style={{backgroundColor: backgroundOf(maxNumberSeen), padding: '4px'}}\n                >\n                    {toDisplay(maxNumberSeen) || 'none'}\n                </span>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport {Game} from './features/hex2048-game/Game'\n\nfunction App() {\n    return (\n        <section className=\"section\">\n            <Game/>\n        </section>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport 'bulma'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}