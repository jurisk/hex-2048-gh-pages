{"version":3,"sources":["features/hex2048-game/actions.ts","features/hex-grids/direction.ts","features/hex-grids/utils.ts","features/hex-grids/cube-coords.ts","features/hex2048-game/board.ts","features/hex2048-game/game-logic.ts","features/hex2048-game/reducer.ts","features/hex2048-game/audio.ts","features/hex2048-game/game-logic-new-values.ts","features/hex2048-game/middleware.ts","app/store.ts","features/hex2048-game/LevelSelectionButtons.tsx","features/hex2048-game/colors.ts","features/hex2048-game/Hex.tsx","features/hex-grids/conversions.ts","features/hex2048-game/ShowBoard.tsx","features/hex2048-game/Game.tsx","App.tsx","index.tsx"],"names":["NewLevelKind","MoveActionKind","NewStateActionKind","moveAction","direction","type","payload","newStateAction","state","Direction","AllDirections","NW","NE","N","S","SW","SE","reverse","array","A","minusToPlusN","n","f","forEach","i","cc","x","y","z","Error","ZeroInCube","cubeCoordsToString","c","abs","Math","inBounds","board","b","a","size","mapSlicesBySomething","create","result","first","values","indices","second","coords","cell","data","get","undefined","O","cellAt","v","push","converted","idx","updated","mapSlicesByX","third","mapSlicesByY","mapSlicesByZ","updateFunction","update","oldValue","mapToArray","flatMapToArray","flatMap","value","maxValue","max","filterCoordinates","p","newEmptyCell","Zero","id","createUuid","updateCell","newValue","mergeAndMoveInDirection","d","moved","moveInDirection","mergeLeft","mergeRight","mergeInDirection","length","rest","slice","shiftLeft","every","q","filtered","filter","Array","fill","map","shiftRight","toDisplay","pow","isGameOver","equals","initialState","maxNumberSeen","gameOver","moves","SadBeep","Audio","playWarningSound","play","rng","random","pickRandomN","order","sort","pickRandomValues","empty","selectedCoords","selectedValue","addRandomValues","then","picked","reduce","acc","old","newBoard","maxOnThis","adjustedBoard","rootReducer","combineReducers","hex2048","action","store","createStore","applyMiddleware","next","performMoveAction","getState","dispatch","valueGenerator","Map","cubeAsString","set","createBoard","hex2048Selector","useAppDispatch","useDispatch","LevelSelectionButtons","className","disabled","level","onClick","colors","backgroundOf","Hex","props","dominantDirection","cursor","toLowerCase","xy","sqrt","flatHexToPixels","boardSize","convert","centerY","centerX","top","left","toPercent","cssProperties","backgroundColor","width","height","rendered","fontSize","floor","data-x","data-y","data-z","data-value","style","ShowBoard","useSelector","hexClicked","Game","container","useRef","useEffect","current","focus","ref","tabIndex","onKeyDown","e","code","padding","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.338446a8.chunk.js","sourcesContent":["import {Game2048State} from './state'\nimport {Direction} from '../hex-grids/direction'\nimport {Size} from './board'\n\nexport const NewLevelKind = 'hex-2048/new-level'\nexport const MoveActionKind = 'hex-2048/move'\nexport const NewStateActionKind = 'hex-2048/new-state'\n\nexport interface NewStateAction {\n    type: typeof NewStateActionKind\n    payload: Game2048State\n}\n\nexport interface MoveAction {\n    type: typeof MoveActionKind\n    payload: Direction\n}\n\nexport interface NewLevelAction {\n    type: typeof NewLevelKind\n    payload: Size\n}\n\nexport type BoardAction = NewStateAction | NewLevelAction | MoveAction\n\nexport function moveAction(direction: Direction): MoveAction {\n    return {\n        type: MoveActionKind,\n        payload: direction,\n    }\n}\n\nexport function newLevelAction(size: Size): NewLevelAction {\n    return {\n        type: NewLevelKind,\n        payload: size,\n    }\n}\n\nexport function newStateAction(state: Game2048State): NewStateAction {\n    return {\n        type: NewStateActionKind,\n        payload: state,\n    }\n}\n","export enum Direction {\n    NW  =   'NW',\n    NE  =   'NE',\n    N   =   'N',\n    S   =   'S',\n    SW  =   'SW',\n    SE  =   'SE',\n}\n\nexport const AllDirections: Direction[] = [Direction.NW, Direction.NE, Direction.N, Direction.S, Direction.SW, Direction.SE]\n","import * as A from 'fp-ts/Array'\n\nexport type Brand<K, T> = K & { __brand: T }\n\nexport const reverse = <T>(array: readonly T[]): readonly T[] => A.reverse([...array])\n\nexport function minusToPlusN(n: number, f: (x: number) => void): void {\n    A.range(-n, n).forEach((i) => f(i))\n}\n\n","import * as O from 'fp-ts/Option'\nimport {Direction} from './direction'\nimport {Brand} from './utils'\n\nexport type X = Brand<number, 'cc-x'>\nexport type Y = Brand<number, 'cc-y'>\nexport type Z = Brand<number, 'cc-z'>\n\nexport interface CubeCoords {\n    readonly x: X\n    readonly y: Y\n    readonly z: Z\n}\n\nexport function cc(x: number, y: number, z: number): CubeCoords {\n    if (x + y + z === 0) {\n        return {x: x as X, y: y as Y, z: z as Z}\n    } else {\n        throw new Error(`Inconsistent cube coordinates - ${x} ${y} ${z}`)\n    }\n}\n\nexport const ZeroInCube = cc(0, 0, 0)\n\nexport type CubeCoordsAsString = Brand<string, 'cube-coords-as-string'>\n\nconst Separator = '_'\nexport function cubeCoordsToString(c: CubeCoords): CubeCoordsAsString {\n    return c.x + Separator + c.y + Separator + c.z as CubeCoordsAsString\n}\n\nexport function dominantDirection(c: CubeCoords): O.Option<Direction> {\n    if ((c.x === 0) && (c.y === 0) && (c.z === 0)) {\n        return O.none\n    } else if (c.x === 0) {\n        return O.some(c.y > 0 ? Direction.N : Direction.S)\n    } else if (c.y === 0) {\n        return O.some(c.x > 0 ? Direction.NE : Direction.SW)\n    } else if (c.z === 0) {\n        return O.some(c.y > 0 ? Direction.NW : Direction.SE)\n    } else {\n        return O.none\n    }\n}\n\nconst abs = Math.abs\nexport function distance(a: CubeCoords, b: CubeCoords): number {\n    return (abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z)) / 2\n}\n\n","import {Map} from 'immutable'\nimport * as O from 'fp-ts/lib/Option'\nimport * as A from 'fp-ts/Array'\nimport {\n    cc,\n    CubeCoords,\n    CubeCoordsAsString,\n    cubeCoordsToString,\n    distance,\n    ZeroInCube\n} from '../hex-grids/cube-coords'\nimport {Brand, minusToPlusN} from '../hex-grids/utils'\nimport {CellValue, GameBoard} from './game-logic'\n\nexport type Size = Brand<number, 'board-size'>\n\nexport type Board<T> = {\n    readonly size: Size\n    readonly data: Map<CubeCoordsAsString, T>\n}\n\nexport function createBoard<T>(size: Size, valueGenerator: (c: CubeCoords) => T): Board<T> {\n    let data: Map<CubeCoordsAsString, T> = Map()\n\n    minusToPlusN(size, (x) => {\n        minusToPlusN(size, (y) => {\n            minusToPlusN(size, (z) => {\n                if (x + y + z === 0) {\n                    const coords = cc(x, y, z)\n                    const cubeAsString = cubeCoordsToString(coords)\n                    const value = valueGenerator(coords)\n                    data = data.set(cubeAsString, value)\n                }\n            })\n        })\n    })\n\n    return { size, data }\n}\n\nexport function inBounds<T>(board: Board<T>, c: CubeCoords): boolean {\n    return distance(ZeroInCube, c) <= board.size\n}\n\nexport function cellAt<T>(board: Board<T>, c: CubeCoords): O.Option<T> {\n    const result = board.data.get(cubeCoordsToString(c))\n    return result === undefined ? O.none : O.some(result)\n}\n\nfunction mapSlicesBySomething<T>(\n    board: Board<T>,\n    f: (data: readonly T[]) => readonly T[],\n    create: (first: number, second: number, third: number) => CubeCoords,\n): Board<T> {\n    let result = board\n\n    A.range(-board.size, board.size).forEach((first) => {\n        const values: T[] = []\n        const indices: number[] = []\n\n        A.range(-board.size, board.size).forEach((second) => {\n            const third = -first-second\n            const coords = create(first, second, third)\n            const cell = cellAt(board, coords)\n\n            // eslint-disable-next-line array-callback-return\n            O.map<T, void>((v) => {\n                values.push(v)\n                indices.push(second)\n            })(cell)\n        })\n\n        const converted = f(values)\n\n        indices.forEach((second, idx) => {\n            const third = -first-second\n            const coords = create(first, second, third)\n            result = updated(result, coords, () => converted[idx])\n        })\n    })\n\n    return result\n}\n\nexport function mapSlicesByX<T>(board: Board<T>, f: (data: readonly T[]) => readonly T[]): Board<T> {\n    return mapSlicesBySomething(board, f, (first: number, second: number, third: number) => cc(first, third, second))\n}\n\nexport function mapSlicesByY<T>(board: Board<T>, f: (data: readonly T[]) => readonly T[]): Board<T> {\n    return mapSlicesBySomething(board, f, (first: number, second: number, third: number) => cc(third, first, second))\n}\n\nexport function mapSlicesByZ<T>(board: Board<T>, f: (data: readonly T[]) => readonly T[]): Board<T> {\n    return mapSlicesBySomething(board, f, (first: number, second: number, third: number) => cc(second, third, first))\n}\n\nexport function updated<T>(board: Board<T>, c: CubeCoords, updateFunction: (oldValue: T) => T): Board<T> {\n    if (inBounds(board, c)) {\n        return {\n            size: board.size,\n            data: board.data.update(cubeCoordsToString(c), (oldValue) => updateFunction(oldValue)),\n        }\n    } else {\n        throw new Error(`Cannot update ${c} as it is out of bounds for ${board}`)\n    }\n}\n\nexport function map<T, R>(board: Board<T>, f: (c: CubeCoords, v: T) => R): Board<R> {\n    const size = board.size\n    let data: Map<CubeCoordsAsString, R> = Map()\n\n    minusToPlusN(size, (x) => {\n        minusToPlusN(size, (y) => {\n            minusToPlusN(size, (z) => {\n                if (x + y + z === 0) {\n                    const c = cc(x, y, z)\n                    const key = cubeCoordsToString(c)\n                    const old = board.data.get(key)\n                    if (old) {\n                        data = data.update(key, () => f(c, old))\n                    }\n                }\n            })\n        })\n    })\n\n    return { data, size }\n}\n\nexport function mapToArray<T, R>(board: Board<T>, f: (c: CubeCoords, v: T) => R): R[] {\n    return flatMapToArray(board, (c, v) => [f(c, v)])\n}\n\nfunction flatMapToArray<T, R>(board: Board<T>, f: (c: CubeCoords, v: T) => R[]): R[] {\n    return A.range(-board.size, board.size).flatMap(x =>\n        A.range(-board.size, board.size).flatMap(y =>\n            A.range(-board.size, board.size).flatMap(z => {\n                if (x + y + z === 0) {\n                    const coords = cc(x, y, z)\n                    const value = board.data.get(cubeCoordsToString(coords))\n                    if (value === undefined) {\n                        throw new Error(`Expected to find ${coords}`)\n                    } else {\n                        return f(coords, value)\n                    }\n                } else {\n                    return []\n                }\n            })\n        )\n    )\n}\n\nexport function maxValue(board: GameBoard): CellValue {\n    const values = mapToArray(board, (c, v) => v.value)\n    return Math.max(...values) as CellValue\n}\n\nexport function filterCoordinates<T>(board: Board<T>, p: (v: T) => boolean): CubeCoords[] {\n    return flatMapToArray(board, (c, v) => p(v) ? [c] : [])\n}\n","import {AllDirections, Direction} from '../hex-grids/direction'\nimport {Brand, reverse} from '../hex-grids/utils'\nimport {Board, mapSlicesByX, mapSlicesByY, mapSlicesByZ} from './board'\nimport {v4 as createUuid} from 'uuid'\n\nexport interface Cell {\n    id: CellId\n    value: CellValue\n}\n\nexport function newEmptyCell(): Cell {\n    return newCell(Zero)\n}\n\nexport function newCell(value: CellValue): Cell {\n    return {\n        id: createUuid() as CellId,\n        value,\n    }\n}\n\nexport function incrementCell(cell: Cell): Cell {\n    return updateCell(cell, cell.value + 1 as CellValue)\n}\n\nexport function updateCell(cell: Cell, newValue: CellValue): Cell {\n    return {\n        id: cell.id,\n        value: newValue,\n    }\n}\n\nexport type CellId = Brand<string, 'cell-id'>\nexport type CellValue = Brand<number, 'cell-value'>\n\nexport const Zero = 0 as CellValue\n\nexport type GameBoard = Board<Cell>\n\nexport function mergeAndMoveInDirection(board: GameBoard, d: Direction): GameBoard {\n    const moved = moveInDirection(board, d)\n    const merged = mergeInDirection(moved, d)\n    return moveInDirection(merged, d)\n}\n\nfunction mergeLeft(array: readonly Cell[]): readonly Cell[] {\n    if (array.length <= 1) {\n        return array\n    } else {\n        const a = array[0]\n        const b = array[1]\n        const rest = array.slice(2)\n        if (a.value === b.value) {\n            if (a.value === 0) { // empty field\n                return [a, b, ...mergeLeft(rest)]\n            } else { // we do the merge\n                return [incrementCell(b), newEmptyCell(), ...mergeLeft(rest)]\n            }\n        } else {\n            return [a, ...mergeLeft([b, ...rest])]\n        }\n    }\n}\n\nfunction mergeRight(array: readonly Cell[]): readonly Cell[] {\n    return reverse(mergeLeft(reverse(array)))\n}\n\nexport function mergeInDirection(board: GameBoard, d: Direction): GameBoard {\n    switch (d) {\n    case Direction.NW:\n        return mapSlicesByZ(board, mergeLeft)\n    case Direction.SE:\n        return mapSlicesByZ(board, mergeRight)\n    case Direction.N:\n        return mapSlicesByX(board, mergeLeft)\n    case Direction.S:\n        return mapSlicesByX(board, mergeRight)\n    case Direction.NE:\n        return mapSlicesByY(board, mergeLeft)\n    case Direction.SW:\n        return mapSlicesByY(board, mergeRight)\n    }\n}\n\nfunction shiftLeft(array: readonly Cell[]): readonly Cell[] {\n    if (array.every((q) => q.value === 0 as CellValue)) {\n        return array\n    } else {\n        const missingZeros = (length: number): readonly Cell[] => new Array(length)\n            .fill(null)\n            .map(() => newEmptyCell())\n        const filtered = array.filter((q) => q.value > 0)\n        return [...filtered, ...missingZeros(array.length - filtered.length)]\n    }\n}\n\nfunction shiftRight(array: readonly Cell[]): readonly Cell[] {\n    return reverse(shiftLeft(reverse(array)))\n}\n\nexport function moveInDirection(board: GameBoard, d: Direction): GameBoard {\n    switch (d) {\n    case Direction.NW:\n        return mapSlicesByZ(board, shiftLeft)\n    case Direction.SE:\n        return mapSlicesByZ(board, shiftRight)\n    case Direction.N:\n        return mapSlicesByX(board, shiftLeft)\n    case Direction.S:\n        return mapSlicesByX(board, shiftRight)\n    case Direction.NE:\n        return mapSlicesByY(board, shiftLeft)\n    case Direction.SW:\n        return mapSlicesByY(board, shiftRight)\n    }\n}\n\nexport function toDisplay(n: CellValue): string {\n    return n ? `${Math.pow(2, n)}` : ''\n}\n\nexport function isGameOver(board: GameBoard): boolean {\n    return AllDirections.every((d) =>\n        mergeAndMoveInDirection(board, d).data.equals(board.data)\n    )\n}\n","import {BoardAction, NewStateActionKind} from './actions'\nimport {Game2048State} from './state'\nimport {Zero} from './game-logic'\nimport * as O from 'fp-ts/Option'\n\nconst initialState: Game2048State = {\n    board: O.none,\n    maxNumberSeen: Zero,\n    gameOver: false,\n    moves: 0,\n}\n\nexport function hex2048Reducer(state: Game2048State = initialState, action: BoardAction): Game2048State {\n    switch (action.type) {\n    case NewStateActionKind:    return action.payload\n    default:                    return state\n    }\n}\n","// eslint-disable-next-line max-len\nconst SadBeep = new Audio('data:audio/mpeg;base64,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wZ0G7jqlt/OcDIKX+/1NblSX+VKfQfP8xuJJGk7////rf////+PgXTv///1JThJJQainmySAB6imUyuVbVttUo7T4Csa821OuF88f62+CZHFnGf///mQgYIEO0SMF2NVy9NxYTdlqJ8AuS4zr//SJoTUJ+CaKKTcZvosrUPo8W/MUv0f033E9E/QpN6P///v/////WRR2mwUAYUABjabRu1vrOLKAF0kIdHjnEx/iNWo7jGn1////mApxNTJQQOU1Het/NoUFTMQs6Vja///THaGIl/0fojl8mjd/Jo8W+ZfpNpCajsz7////6kn/////WRRgDz//LD1KSTDjKOciSAKxdLx5S31uYqKIWj/+5JECgAC8V5M6g9rdFyr6Vo9rW6KtHcr5DEJQRkSpLRklSigvVc4QpmyPe9H3zHR1/in9P/8VNCMJOzYUDyVjfwHP0ZgiZt/3/+9EBnDKbegdUrckhgntHaQ9vX/X/9A/////+r/////mJ3/9ItRcoVRogAcmV9N8z0pvES8QQsKoMGXEymPQyWm6E4HQLqgpv/CZJAtYXQSwoF8e6SB56zABEoW+qgZjJAZovGr0Gl5/OjFKL3JwnaX9v7/X8y1f/////////49WAzMzEYYMZLq6CUANIqbDX7lisBIdraAEPwShTRc9WZ2vAqBc4NQ9GrUNaw0Czcrte0g1NEoiU8NFjx4NFh54FSwlOlgaCp0S3hqo8SLOh3/63f7P/KgKJxxhgGSnAFMCnIogwU5JoqBIDAuBIiNLETyFmiImtYiDTSlb8ziIFYSFv/QPC38zyxEOuPeVGHQ77r/1u/+kq49//6g4gjoVQSUMYQUSAP8PwRcZIyh2kCI2OwkZICZmaZxgnsNY8DmSCWX0idhtz3VTJSqErTSB//1X7TTTVVV//uSZB2P8xwRJ4HvYcItQlWBACM4AAABpAAAACAAADSAAAAEVf/+qCE000VVVVU0002//+qqqqummmmr///qqqppppoqqqqppppoqqATkEjIyIxBlBA5KwUEDBBwkFhYWFhUVFfiqhYWFhcVFRUVFv/Ff/xUVFRYWFpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==')\n\nexport async function playWarningSound() {\n    return SadBeep.play()\n}\n","import {CubeCoords} from '../hex-grids/cube-coords'\nimport {CellValue} from './game-logic'\n\nfunction rng(): number {\n    return Math.random()\n}\n\nfunction pickRandomN<T>(array: readonly T[], n: number): T[] {\n    return array\n        .map((a) => ({order: rng(), value: a}))\n        .sort((a, b) => a.order - b.order)\n        .map((a) => a.value)\n        .slice(0, n)\n}\n\n// TODO: replace with a version which goes to an external service for this\nexport async function pickRandomValues(empty: CubeCoords[]): Promise<[CubeCoords, CellValue][]> {\n    const selectedCoords: CubeCoords[] = pickRandomN(empty, 2)\n    const selectedValue: CellValue = (rng() > 0.5 ? 1 : 2) as CellValue // either 2^1 == 2 or 2^2 == 4\n    return selectedCoords.map((c) => [c, selectedValue])\n}\n","import {createBoard, filterCoordinates, maxValue, Size, updated} from './board'\nimport {Game2048State} from './state'\nimport {\n    CellValue,\n    GameBoard,\n    isGameOver,\n    mergeAndMoveInDirection,\n    newEmptyCell,\n    updateCell, Zero\n} from './game-logic'\nimport * as O from 'fp-ts/Option'\nimport {Direction} from '../hex-grids/direction'\nimport {playWarningSound} from './audio'\nimport {CubeCoords} from '../hex-grids/cube-coords'\nimport {pickRandomValues} from './game-logic-new-values'\nimport {Middleware} from 'redux'\nimport {BoardAction, MoveActionKind, NewLevelKind, newStateAction} from './actions'\nimport {RootState} from '../../app/store'\n\nexport const middleware: Middleware<\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    {}, // legacy type parameter added to satisfy interface signature\n    RootState\n    > = store => next => (action: BoardAction) => {\n        switch (action.type) {\n        case MoveActionKind:\n            return performMoveAction(store.getState().hex2048, action.payload)\n                .then((result) =>\n                    store.dispatch(newStateAction(result))\n                )\n        case NewLevelKind:\n            return performNewLevel(action.payload)\n                .then((result) =>\n                    store.dispatch(newStateAction(result))\n                )\n        default:\n            return next(action)\n        }\n    }\n\nasync function addRandomValues(board: GameBoard): Promise<GameBoard> {\n    const empty: CubeCoords[] = filterCoordinates(board, (v) => v.value === Zero)\n    return pickRandomValues(empty)\n        .then(picked =>\n            picked.reduce(\n                (acc, [c, v]) =>\n                    updated(acc, c, (old) => updateCell(old, v)),\n                board,\n            )\n        )\n}\n\nfunction performNewLevel(size: Size): Promise<Game2048State> {\n    return addRandomValues(createBoard(size, newEmptyCell))\n        .then((board) => (\n            {\n                board: O.some(board),\n                maxNumberSeen: maxValue(board),\n                gameOver: false,\n                moves: 0,\n            }\n        ))\n}\n\nasync function performMoveAction(state: Game2048State, direction: Direction): Promise<Game2048State> {\n    const board = O.fold(\n        () => {throw new Error('Expected to have state')},\n        (board: GameBoard) => board,\n    )(state.board)\n\n    const newBoard = mergeAndMoveInDirection(board, direction)\n\n    if (newBoard.data.equals(board.data)) { // nothing changed\n        return playWarningSound()\n            .then(() => state)\n    } else {\n        const maxOnThis = maxValue(newBoard)\n        const maxNumberSeen = Math.max(state.maxNumberSeen, maxOnThis) as CellValue\n        return addRandomValues(newBoard)\n            .then((adjustedBoard) => ({\n                maxNumberSeen,\n                board: O.some(adjustedBoard),\n                gameOver: isGameOver(adjustedBoard),\n                moves: state.moves + 1,\n            }))\n    }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport {useDispatch} from 'react-redux'\nimport {hex2048Reducer} from '../features/hex2048-game/reducer'\nimport {middleware} from '../features/hex2048-game/middleware'\n\nconst rootReducer = combineReducers({\n    hex2048: hex2048Reducer,\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(middleware))\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport const hex2048Selector = (state: RootState) => state.hex2048\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>() // Export a hook that can be reused to resolve types\n","import React from 'react'\nimport {useAppDispatch} from '../../app/store'\nimport {Size} from './board'\nimport {newLevelAction} from './actions'\n\nexport function LevelSelectionButtons() {\n    const dispatch = useAppDispatch()\n\n    return (\n        <div className='buttons has-addons'>\n            <button className='button' disabled={true}>\n                New Level\n            </button>\n            {[1, 2, 3, 4].map((level) =>\n                (<button\n                    className='button'\n                    key={level}\n                    onClick={() => dispatch(newLevelAction(level as Size))}\n                >\n                    {level}\n                </button>)\n            )}\n        </div>\n    )\n}\n","import {CellValue} from './game-logic'\n\nconst colors = [\n    '#D0D0D0', // empty\n    '#B0D8A4', // 2\n    '#CADB9E', // 4\n    '#E4DE97', // 8\n    '#FEE191', // 16\n    '#FEC181', // 32\n    '#FDA070', // 64\n    '#FD8060', // 128\n    '#F9715E', // 256\n    '#F4615C', // 512\n    '#F0525A', // 1024\n    '#EB4258', // 2048\n]\n\nexport function backgroundOf(n: CellValue): string {\n    return colors[n] || colors[colors.length - 1]\n}\n","import {CubeCoords, dominantDirection} from '../hex-grids/cube-coords'\nimport React, {CSSProperties} from 'react'\nimport {Cell, toDisplay} from './game-logic'\nimport * as O from 'fp-ts/Option'\nimport {Direction} from '../hex-grids/direction'\nimport {backgroundOf} from './colors'\nimport {flatHexToPixels} from '../hex-grids/conversions'\nimport {Size} from './board'\n\ninterface HexProps {\n    coords: CubeCoords,\n    cell: Cell,\n    boardSize: Size,\n    onClick: (d: Direction) => void,\n}\n\nexport function Hex(props: HexProps) {\n    const c = props.coords\n    const q = props.cell\n\n    const direction = dominantDirection(c)\n    const cursor = O.fold<Direction, string>(\n        () => 'not-allowed',\n        (d) => `${d.toLowerCase()}-resize`\n    )(direction)\n\n    const xy = flatHexToPixels(c)\n\n    const boardSize = props.boardSize * 2 + 1\n    const convert = (n: number): number => (n / boardSize) / 2 + 0.5\n\n    const centerY = convert(xy.y)\n    const centerX = convert(xy.x)\n    const size = (1 / boardSize) * (Math.sqrt(3) / 2)\n    const top = centerY - (size / 2)\n    const left = centerX - (size / 2)\n\n    const toPercent = (n: number): string => (n * 100) + '%'\n\n    const cssProperties: CSSProperties = ({\n        backgroundColor: backgroundOf(q.value),\n        cursor: cursor,\n        top: toPercent(top),\n        left: toPercent(left),\n        width: toPercent(size),\n        height: toPercent(size),\n    })\n    const rendered: string = toDisplay(q.value)\n    const onClick = O.fold(() => undefined, (d: Direction) => () => props.onClick(d))(direction)\n    const fontSize = `${Math.floor((1 / boardSize) * 20)}vw`\n\n    return (<div\n        id={q.id}\n        data-x={c.x}\n        data-y={c.y}\n        data-z={c.z}\n        data-value={rendered}\n        className=\"hex\"\n        style={cssProperties}\n        onClick={onClick}\n    >\n        <span className='hex-text' style={{fontSize: fontSize}}>{rendered}</span>\n    </div>)\n}\n\n","import {CubeCoords} from './cube-coords'\n\nexport interface XY {\n    x: number\n    y: number\n}\n\nexport function flatHexToPixels(cc: CubeCoords): XY {\n    const x = (3. / 2 * cc.x)\n    const y = (Math.sqrt(3) / 2 * cc.x + Math.sqrt(3) * cc.z)\n    return { x, y }\n}\n","import {useSelector} from 'react-redux'\nimport React from 'react'\nimport {hex2048Selector, useAppDispatch} from '../../app/store'\nimport './ShowBoard.scss'\nimport * as O from 'fp-ts/Option'\nimport {Direction} from '../hex-grids/direction'\nimport {GameBoard} from './game-logic'\nimport {Game2048State} from './state'\nimport {moveAction} from './actions'\nimport {Hex} from './Hex'\nimport {mapToArray} from './board'\n\nexport function ShowBoard() {\n    const hex2048: Game2048State = useSelector(hex2048Selector)\n    const board = hex2048.board\n    const dispatch = useAppDispatch()\n\n    function hexClicked(direction: Direction) {\n        dispatch(moveAction(direction))\n    }\n\n    return O.fold(\n        () => <div className='notification is-info'>Select a level</div>,\n        (board: GameBoard) => (\n            <div className='hex-grid'>\n                {\n                    mapToArray(board, (c, v) =>\n                        <Hex\n                            key={v.id}\n                            coords={c}\n                            cell={v}\n                            boardSize={board.size}\n                            onClick={hexClicked}\n                        />\n                    )\n                }\n            </div>\n        )\n    )(board)\n}\n","import React, {KeyboardEvent, useEffect, useRef} from 'react'\nimport {hex2048Selector, useAppDispatch} from '../../app/store'\nimport {LevelSelectionButtons} from './LevelSelectionButtons'\nimport {ShowBoard} from './ShowBoard'\nimport './Game.scss'\nimport {Direction} from '../hex-grids/direction'\nimport {useSelector} from 'react-redux'\nimport {toDisplay} from './game-logic'\nimport {backgroundOf} from './colors'\nimport {Game2048State} from './state'\nimport {moveAction} from './actions'\n\nexport function Game() {\n    const dispatch = useAppDispatch()\n    const hex2048: Game2048State = useSelector(hex2048Selector)\n    const {maxNumberSeen, gameOver, moves} = hex2048\n\n    function handleKeyDown<T>(e: KeyboardEvent<T>) {\n        if (e.code === 'KeyS') {\n            dispatch(moveAction(Direction.S))\n        } else if (e.code === 'KeyD') {\n            dispatch(moveAction(Direction.SE))\n        } else if (e.code === 'KeyA') {\n            dispatch(moveAction(Direction.SW))\n        } else if (e.code === 'KeyW') {\n            dispatch(moveAction(Direction.N))\n        } else if (e.code === 'KeyQ') {\n            dispatch(moveAction(Direction.NW))\n        } else if (e.code === 'KeyE') {\n            dispatch(moveAction(Direction.NE))\n        }\n    }\n\n    const container = useRef<HTMLDivElement>(null)\n\n    useEffect(() => container.current?.focus())\n\n    return (\n        <div ref={container} className='container game-board' tabIndex={-1} onKeyDown={handleKeyDown}>\n            <LevelSelectionButtons/>\n            <ShowBoard/>\n            {gameOver ? <div className='notification is-danger'>Game over!</div> : null}\n            <div className='notification is-normal'>\n                <span className='has-text-weight-bold'>{moves}</span>\n                &nbsp;moves made. Maximum number seen:&nbsp;\n                <span\n                    className='has-text-weight-bold'\n                    style={{backgroundColor: backgroundOf(maxNumberSeen), padding: '4px'}}\n                >\n                    {toDisplay(maxNumberSeen) || 'none'}\n                </span>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport {Game} from './features/hex2048-game/Game'\n\nfunction App() {\n    return (\n        <section className=\"section\">\n            <Game/>\n        </section>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport 'bulma'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}